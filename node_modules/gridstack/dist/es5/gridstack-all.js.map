{"version":3,"file":"gridstack-all.js","mappings":"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","sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/./src/dd-base-impl.ts","webpack://GridStack/./src/dd-draggable.ts","webpack://GridStack/./src/dd-droppable.ts","webpack://GridStack/./src/dd-element.ts","webpack://GridStack/./src/dd-gridstack.ts","webpack://GridStack/./src/dd-manager.ts","webpack://GridStack/./src/dd-resizable-handle.ts","webpack://GridStack/./src/dd-resizable.ts","webpack://GridStack/./src/dd-touch.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/types.ts","webpack://GridStack/./src/utils.ts","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, function() {\nreturn ","/**\n * dd-base-impl.ts 10.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  protected _disabled: boolean; // initial state to differentiate from false\n  /** @internal */\n  protected _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n      return this._eventRegister[eventName](event);\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","/**\n * dd-draggable.ts 10.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { Utils } from './utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from './types';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, touchend, touchmove, touchstart, pointerdown } from './dd-touch';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  handle?: string;\n  helper?: 'clone' | HTMLElement | ((event: Event) => HTMLElement);\n  cancel?: string;\n  // containment?: string | HTMLElement; // TODO: not implemented yet\n  // revert?: string | boolean | unknown; // TODO: not implemented yet\n  // scroll?: boolean;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface DragOffset {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n}\n\ninterface DragScaleReciprocal {\n  x: number;\n  y: number;\n}\n\ntype DDDragEvent = 'drag' | 'dragstart' | 'dragstop';\n\n// make sure we are not clicking on known object that handles mouseDown\nconst skipMouseDown = 'input,textarea,button,select,option,[contenteditable=\"true\"],.ui-resizable-handle';\n\n// let count = 0; // TEST\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected dragOffset: DragOffset;\n  /** @internal */\n  protected dragScale: DragScaleReciprocal = { x: 1, y: 1 };\n  /** @internal */\n  protected dragElementOriginStyle: Array<string>;\n  /** @internal */\n  protected dragEl: HTMLElement;\n  /** @internal true while we are dragging an item around */\n  protected dragging: boolean;\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected helperContainment: HTMLElement;\n  /** @internal properties we change during dragging, and restore back */\n  protected static originStyleProp = ['transition', 'pointerEvents', 'position', 'left', 'top', 'minWidth', 'willChange'];\n  /** @internal pause before we call the actual drag hit collision code */\n  protected dragTimeout: number;\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n\n    // get the element that is actually supposed to be dragged by\n    let handleName = option.handle.substring(1);\n    this.dragEl = el.classList.contains(handleName) ? el : el.querySelector(option.handle) || el;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n    this.enable();\n  }\n\n  public on(event: DDDragEvent, callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: DDDragEvent): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.dragEl.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchstart', touchstart);\n      this.dragEl.addEventListener('pointerdown', pointerdown);\n      // this.dragEl.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    this.el.classList.remove('ui-draggable-disabled');\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.dragEl.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchstart', touchstart);\n      this.dragEl.removeEventListener('pointerdown', pointerdown);\n    }\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n    delete this.dragTimeout;\n    if (this.mouseDownEvent) this._mouseUp(this.mouseDownEvent);\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal call when mouse goes down before a dragstart happens */\n  protected _mouseDown(e: MouseEvent): boolean {\n    // don't let more than one widget handle mouseStart\n    if (DDManager.mouseHandled) return;\n    if (e.button !== 0) return true; // only left click\n\n    // make sure we are not clicking on known object that handles mouseDown, or ones supplied by the user\n    if ((e.target as HTMLElement).closest(skipMouseDown)) return true;\n    if (this.option.cancel) {\n      if ((e.target as HTMLElement).closest(this.option.cancel)) return true;\n    }\n\n    // REMOVE: why would we get the event if it wasn't for us or child ?\n    // make sure we are clicking on a drag handle or child of it...\n    // Note: we don't need to check that's handle is an immediate child, as mouseHandled will prevent parents from also handling it (lowest wins)\n    // let className = this.option.handle.substring(1);\n    // let el = e.target as HTMLElement;\n    // while (el && !el.classList.contains(className)) { el = el.parentElement; }\n    // if (!el) return;\n\n    this.mouseDownEvent = e;\n    delete this.dragging;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    // document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack\n    document.addEventListener('mousemove', this._mouseMove, true); // true=capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchmove', touchmove);\n      this.dragEl.addEventListener('touchend', touchend);\n    }\n\n    e.preventDefault();\n    // preventDefault() prevents blur event which occurs just after mousedown event.\n    // if an editable content has focus, then blur must be call\n    if (document.activeElement) (document.activeElement as HTMLElement).blur();\n\n    DDManager.mouseHandled = true;\n    return true;\n  }\n\n  /** @internal method to call actual drag event */\n  protected _callDrag(e: DragEvent): void {\n    if (!this.dragging) return;\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drag' });\n    if (this.option.drag) {\n      this.option.drag(ev, this.ui());\n    }\n    this.triggerEvent('drag', ev);\n  }\n\n  /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */\n  protected _mouseMove(e: DragEvent): boolean {\n    // console.log(`${count++} move ${e.x},${e.y}`)\n    let s = this.mouseDownEvent;\n\n    if (this.dragging) {\n      this._dragFollow(e);\n      // delay actual grid handling drag until we pause for a while if set\n      if (DDManager.pauseDrag) {\n        const pause = Number.isInteger(DDManager.pauseDrag) ? DDManager.pauseDrag as number : 100;\n        if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n        this.dragTimeout = window.setTimeout(() => this._callDrag(e), pause);\n      } else {\n        this._callDrag(e);\n      }\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {\n      /**\n       * don't start unless we've moved at least 3 pixels\n       */\n      this.dragging = true;\n      DDManager.dragElement = this;\n      // if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)\n      let grid = (this.el as GridItemHTMLElement).gridstackNode?.grid;\n      if (grid) {\n        DDManager.dropElement = (grid.el as DDElementHost).ddElement.ddDroppable;\n      } else {\n        delete DDManager.dropElement;\n      }\n      this.helper = this._createHelper(e);\n      this._setupHelperContainmentStyle();\n      this.dragOffset = this._getDragOffset(e, this.el, this.helperContainment);\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstart' });\n\n      this._setupHelperStyle(e);\n      if (this.option.start) {\n        this.option.start(ev, this.ui());\n      }\n      this.triggerEvent('dragstart', ev);\n    }\n    e.preventDefault(); // needed otherwise we get text sweep text selection as we drag around\n    return true;\n  }\n\n  /** @internal call when the mouse gets released to drop the item at current location */\n  protected _mouseUp(e: MouseEvent): void {\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchmove', touchmove, true);\n      this.dragEl.removeEventListener('touchend', touchend, true);\n    }\n    if (this.dragging) {\n      delete this.dragging;\n\n      // reset the drop target if dragging over ourself (already parented, just moving during stop callback below)\n      if (DDManager.dropElement?.el === this.el.parentElement) {\n        delete DDManager.dropElement;\n      }\n\n      this.helperContainment.style.position = this.parentOriginStylePosition || null;\n      if (this.helper === this.el) {\n        this._removeHelperStyle();\n      } else {\n        this.helper.remove();\n      }\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstop' });\n      if (this.option.stop) {\n        this.option.stop(ev); // NOTE: destroy() will be called when removing item, so expect NULL ptr after!\n      }\n      this.triggerEvent('dragstop', ev);\n\n      // call the droppable method to receive the item\n      if (DDManager.dropElement) {\n        DDManager.dropElement.drop(e);\n      }\n    }\n    delete this.helper;\n    delete this.mouseDownEvent;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    delete DDManager.mouseHandled;\n    e.preventDefault();\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  protected _createHelper(event: DragEvent): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper(event);\n    } else if (this.option.helper === 'clone') {\n      helper = Utils.cloneNode(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      Utils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentElement : this.option.appendTo);\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal set the fix position of the dragged item */\n  protected _setupHelperStyle(e: DragEvent): DDDraggable {\n    this.helper.classList.add('ui-draggable-dragging');\n    // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\n    const style = this.helper.style;\n    style.pointerEvents = 'none'; // needed for over items to get enter/leave\n    // style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)\n    style.width = this.dragOffset.width + 'px';\n    style.height = this.dragOffset.height + 'px';\n    style.willChange = 'left, top';\n    style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\n    this._dragFollow(e); // now position it\n    style.transition = 'none'; // show up instantly\n    setTimeout(() => {\n      if (this.helper) {\n        style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal restore back the original style before dragging */\n  protected _removeHelperStyle(): DDDraggable {\n    this.helper.classList.remove('ui-draggable-dragging');\n    let node = (this.helper as GridItemHTMLElement)?.gridstackNode;\n    // don't bother restoring styles if we're gonna remove anyway...\n    if (!node?._isAboutToRemove && this.dragElementOriginStyle) {\n      let helper = this.helper;\n      // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'.\n      // TODO: this also removes resizing animation which doesn't have this issue, but others.\n      // Ideally both would animate ('move' would immediately restore 'absolute' and adjust coordinate to match,\n      // then trigger a delay (repaint) to restore to final dest with animate) but then we need to make sure 'resizestop'\n      // is called AFTER 'transitionend' event is received (see https://github.com/gridstack/gridstack.js/issues/2033)\n      let transition = this.dragElementOriginStyle['transition'] || null;\n      helper.style.transition = this.dragElementOriginStyle['transition'] = 'none'; // can't be NULL #1973\n      DDDraggable.originStyleProp.forEach(prop => helper.style[prop] = this.dragElementOriginStyle[prop] || null);\n      setTimeout(() => helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal updates the top/left position to follow the mouse */\n  protected _dragFollow(e: DragEvent): void {\n    let containmentRect = { left: 0, top: 0 };\n    // if (this.helper.style.position === 'absolute') { // we use 'fixed'\n    //   const { left, top } = this.helperContainment.getBoundingClientRect();\n    //   containmentRect = { left, top };\n    // }\n    const style = this.helper.style;\n    const offset = this.dragOffset;\n    style.left = (e.clientX + offset.offsetLeft - containmentRect.left) * this.dragScale.x + 'px';\n    style.top = (e.clientY + offset.offsetTop - containmentRect.top) * this.dragScale.y + 'px';\n  }\n\n  /** @internal */\n  protected _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.helper.style.position !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\n\n    // in case ancestor has transform/perspective css properties that change the viewpoint\n    let xformOffsetX = 0;\n    let xformOffsetY = 0;\n    if (parent) {\n      const testEl = document.createElement('div');\n      Utils.addElStyles(testEl, {\n        opacity: '0',\n        position: 'fixed',\n        top: 0 + 'px',\n        left: 0 + 'px',\n        width: '1px',\n        height: '1px',\n        zIndex: '-999999',\n      });\n      parent.appendChild(testEl);\n      const testElPosition = testEl.getBoundingClientRect();\n      parent.removeChild(testEl);\n      xformOffsetX = testElPosition.left;\n      xformOffsetY = testElPosition.top;\n      this.dragScale = {\n        x: 1 / testElPosition.width,\n        y: 1 / testElPosition.height\n      };\n    }\n\n    const targetOffset = el.getBoundingClientRect();\n    return {\n      left: targetOffset.left,\n      top: targetOffset.top,\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\n      width: targetOffset.width * this.dragScale.x,\n      height: targetOffset.height * this.dragScale.y\n    };\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui(): DDUIData {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    return {\n      position: { //Current CSS position of the helper as { top, left } object\n        top: (offset.top - containmentRect.top) * this.dragScale.y,\n        left: (offset.left - containmentRect.left) * this.dragScale.x\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n","/**\n * dd-droppable.ts 10.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, pointerenter, pointerleave } from './dd-touch';\nimport { DDUIData } from './types';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui: DDUIData) => void;\n  over?: (event: DragEvent, ui: DDUIData) => void;\n  out?: (event: DragEvent, ui: DDUIData) => void;\n}\n\n// let count = 0; // TEST\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseEnter = this._mouseEnter.bind(this);\n    this._mouseLeave = this._mouseLeave.bind(this);\n    this.enable();\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.el.classList.add('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('mouseenter', this._mouseEnter);\n    this.el.addEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.addEventListener('pointerenter', pointerenter);\n      this.el.addEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.el.classList.remove('ui-droppable');\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('mouseenter', this._mouseEnter);\n    this.el.removeEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.removeEventListener('pointerenter', pointerenter);\n      this.el.removeEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public destroy(): void {\n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  protected _mouseEnter(e: MouseEvent): void {\n    // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement) return;\n    if (!this._canDrop(DDManager.dragElement.el)) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\n    if (DDManager.dropElement && DDManager.dropElement !== this) {\n      DDManager.dropElement._mouseLeave(e as DragEvent);\n    }\n    DDManager.dropElement = this;\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.classList.add('ui-droppable-over');\n    // console.log('tracking'); // TEST\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  protected _mouseLeave(e: MouseEvent): void {\n    // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement || DDManager.dropElement !== this) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropout' });\n    if (this.option.out) {\n      this.option.out(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropout', ev);\n\n    if (DDManager.dropElement === this) {\n      delete DDManager.dropElement;\n      // console.log('not tracking'); // TEST\n\n      // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\n      let parentDrop: DDDroppable;\n      let parent: DDElementHost = this.el.parentElement;\n      while (!parentDrop && parent) {\n        parentDrop = parent.ddElement?.ddDroppable;\n        parent = parent.parentElement;\n      }\n      if (parentDrop) {\n        parentDrop._mouseEnter(e);\n      }\n    }\n  }\n\n  /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\n  public drop(e: MouseEvent): void {\n    e.preventDefault();\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n  }\n\n  /** @internal true if element matches the string/method accept option */\n  protected _canDrop(el: HTMLElement): boolean {\n    return el && (!this.accept || this.accept(el));\n  }\n\n  /** @internal */\n  protected _setupAccept(): DDDroppable {\n    if (!this.option.accept) return this;\n    if (typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => el.classList.contains(this.option.accept as string) || el.matches(this.option.accept as string);\n    } else {\n      this.accept = this.option.accept;\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _ui(drag: DDDraggable): DDUIData {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","/**\n * dd-elements.ts 10.0.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","/**\r\n * dd-gridstack.ts 10.0.1\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridItemHTMLElement, GridStackElement, DDDragInOpt } from './types';\r\nimport { Utils } from './utils';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElement, DDElementHost } from './dd-element';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n// let count = 0; // TEST\r\n\r\n/**\r\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\r\n */\r\nexport class DDGridStack {\r\n\r\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddResizable && dEl.cleanResizable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupResizable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\r\n        let autoHide = !grid.opts.alwaysShowResizeHandle;\r\n        dEl.setupResizable({\r\n          ...grid.opts.resizable,\r\n          ...{ handles, autoHide },\r\n          ...{\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            resize: opts.resize\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddDraggable && dEl.cleanDraggable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupDraggable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        dEl.setupDraggable({\r\n          ...grid.opts.draggable,\r\n          ...{\r\n            // containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            drag: opts.drag\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\r\n    return this;\r\n  }\r\n\r\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): DDGridStack {\r\n    if (typeof opts.accept === 'function' && !opts._accept) {\r\n      opts._accept = opts.accept;\r\n      opts.accept = (el) => opts._accept(el);\r\n    }\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\r\n      } else if (opts === 'destroy') {\r\n        if (dEl.ddDroppable) { // error to call destroy if not there\r\n          dEl.cleanDroppable();\r\n        }\r\n      } else if (opts === 'option') {\r\n        dEl.setupDroppable({ [key]: value });\r\n      } else {\r\n        dEl.setupDroppable(opts);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** true if element is droppable */\r\n  public isDroppable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isDraggable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isResizable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\r\n  }\r\n\r\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl =>\r\n      dEl.on(name, (event: Event) => {\r\n        callback(\r\n          event,\r\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\r\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\r\n      })\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public off(el: GridItemHTMLElement, name: string): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\r\n    return this;\r\n  }\r\n\r\n  /** @internal returns a list of DD elements, creating them on the fly by default */\r\n  protected _getDDElements(els: GridStackElement, create = true): DDElement[] {\r\n    let hosts = Utils.getElements(els) as DDElementHost[];\r\n    if (!hosts.length) return [];\r\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\r\n    if (!create) { list.filter(d => d); } // remove nulls\r\n    return list;\r\n  }\r\n}\r\n","/**\n * dd-manager.ts 10.0.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDDroppable } from './dd-droppable';\nimport { DDResizable } from './dd-resizable';\n\n/**\n * globals that are shared across Drag & Drop instances\n */\nexport class DDManager {\n  /** if set (true | in msec), dragging placement (collision) will only happen after a pause by the user*/\n  public static pauseDrag: boolean | number;\n\n  /** true if a mouse down event was handled */\n  public static mouseHandled: boolean;\n\n  /** item being dragged */\n  public static dragElement: DDDraggable;\n\n  /** item we are currently over as drop target */\n  public static dropElement: DDDroppable;\n\n  /** current item we're over for resizing purpose (ignore nested grid resize handles) */\n  public static overResizeElement: DDResizable;\n\n}\n","/**\n * dd-resizable-handle.ts 10.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { isTouch, pointerdown, touchend, touchmove, touchstart } from './dd-touch';\n\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  protected el: HTMLElement;\n  /** @internal */\n  protected host: HTMLElement;\n  /** @internal */\n  protected option: DDResizableHandleOpt;\n  /** @internal */\n  protected dir: string;\n  /** @internal true after we've moved enough pixels to start a resize */\n  protected moving = false;\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  protected _init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.addEventListener('touchstart', touchstart);\n      this.el.addEventListener('pointerdown', pointerdown);\n      // this.el.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.removeEventListener('touchstart', touchstart);\n      this.el.removeEventListener('pointerdown', pointerdown);\n    }\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  protected _mouseDown(e: MouseEvent): void {\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.addEventListener('touchmove', touchmove);\n      this.el.addEventListener('touchend', touchend);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseMove(e: MouseEvent): void {\n    let s = this.mouseDownEvent;\n    if (this.moving) {\n      this._triggerEvent('move', e);\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      // don't start unless we've moved at least 3 pixels\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n      this._triggerEvent('move', e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseUp(e: MouseEvent): void {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.removeEventListener('touchmove', touchmove);\n      this.el.removeEventListener('touchend', touchend);\n    }\n    delete this.moving;\n    delete this.mouseDownEvent;\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n","/**\n * dd-resizable.ts 10.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDUIData, Rect, Size } from './types';\nimport { DDManager } from './dd-manager';\n\n// import { GridItemHTMLElement } from './types'; let count = 0; // TEST\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface RectScaleReciprocal {\n  x: number;\n  y: number;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  protected handlers: DDResizableHandle[];\n  /** @internal */\n  protected originalRect: Rect;\n  /** @internal */\n  protected rectScale: RectScaleReciprocal = { x: 1, y: 1 };\n  /** @internal */\n  protected temporalRect: Rect;\n  /** @internal */\n  protected scrollY: number;\n  /** @internal */\n  protected scrolled: number;\n  /** @internal */\n  protected scrollEl: HTMLElement;\n  /** @internal */\n  protected startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  protected elOriginStyleVal: string[];\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseOver = this._mouseOver.bind(this);\n    this._mouseOut = this._mouseOut.bind(this);\n    this.enable();\n    this._setupAutoHide(this.option.autoHide);\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.remove('ui-resizable-disabled');\n    this._setupAutoHide(this.option.autoHide);\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this._setupAutoHide(false);\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    this._setupAutoHide(false);\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide(this.option.autoHide);\n    }\n    return this;\n  }\n\n  /** @internal turns auto hide on/off */\n  protected _setupAutoHide(auto: boolean): DDResizable {\n    if (auto) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover and not mouseenter to get better performance and track for nested cases\n      this.el.addEventListener('mouseover', this._mouseOver);\n      this.el.addEventListener('mouseout', this._mouseOut);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._mouseOver);\n      this.el.removeEventListener('mouseout', this._mouseOut);\n      if (DDManager.overResizeElement === this) {\n        delete DDManager.overResizeElement;\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _mouseOver(e: Event): void {\n    // console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    // already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018\n    if (DDManager.overResizeElement || DDManager.dragElement) return;\n    DDManager.overResizeElement = this;\n    // console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _mouseOut(e: Event): void {\n    // console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    if (DDManager.overResizeElement !== this) return;\n    delete DDManager.overResizeElement;\n    // console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  protected _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollElement(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.scrolled = 0;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStop(event: MouseEvent): DDResizable {\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  protected _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n\n    const parent = this.el.parentElement;\n    const testEl = document.createElement('div');\n    Utils.addElStyles(testEl, {\n      opacity: '0',\n      position: 'fixed',\n      top: 0 + 'px',\n      left: 0 + 'px',\n      width: '1px',\n      height: '1px',\n      zIndex: '-999999',\n    });\n    parent.appendChild(testEl);\n    const testElPosition = testEl.getBoundingClientRect();\n    parent.removeChild(testEl);\n    this.rectScale = {\n      x: 1 / testElPosition.width,\n      y: 1 / testElPosition.height\n    };\n\n    if (getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = 'absolute';\n    this.el.style.opacity = '0.8';\n    return this;\n  }\n\n  /** @internal */\n  protected _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  protected _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n\n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += offsetX;\n    } else if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += offsetY;\n    } else if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n    }\n    const constrain = this._constrainSize(newRect.width, newRect.height);\n    if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - constrain.width;\n      }\n      newRect.width = constrain.width;\n    }\n    if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - constrain.height;\n      }\n      newRect.height = constrain.height;\n    }\n    return newRect;\n  }\n\n  /** @internal constrain the size to the set min/max values */\n  protected _constrainSize(oWidth: number, oHeight: number): Size {\n    const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\n    const minWidth = this.option.minWidth / this.rectScale.x || oWidth;\n    const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\n    const minHeight = this.option.minHeight / this.rectScale.y || oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  protected _applyChange(): DDResizable {\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n    if (this.el.style.position === 'absolute') {\n      const containmentEl = this.el.parentElement;\n      const { left, top } = containmentEl.getBoundingClientRect();\n      containmentRect = { left, top, width: 0, height: 0 };\n    }\n    if (!this.temporalRect) return this;\n    Object.keys(this.temporalRect).forEach(key => {\n      const value = this.temporalRect[key];\n      const scaleReciprocal = key === 'width' || key === 'left' ? this.rectScale.x : key === 'height' || key === 'top' ? this.rectScale.y : 1;\n      this.el.style[key] = (value - containmentRect[key]) * scaleReciprocal + 'px';\n    });\n    return this;\n  }\n\n  /** @internal */\n  protected _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  protected _ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: (rect.left - containmentRect.left) * this.rectScale.x,\n        top: (rect.top - containmentRect.top) * this.rectScale.y\n      },\n      size: {\n        width: rect.width * this.rectScale.x,\n        height: rect.height * this.rectScale.y\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","/**\n * touch.ts 10.0.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\n\n/**\n * Detect touch support - Windows Surface devices and other touch devices\n * should we use this instead ? (what we had for always showing resize handles)\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n */\nexport const isTouch: boolean = typeof window !== 'undefined' && typeof document !== 'undefined' &&\n( 'ontouchstart' in document\n  || 'ontouchstart' in window\n  // || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  || ((window as any).DocumentTouch && document instanceof (window as any).DocumentTouch)\n  || navigator.maxTouchPoints > 0\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  || (navigator as any).msMaxTouchPoints > 0\n);\n\n// interface TouchCoord {x: number, y: number};\n\nclass DDTouch {\n  public static touchHandled: boolean;\n  public static pointerLeaveTimeout: number;\n}\n\n/**\n* Get the x,y position of a touch event\n*/\n// function getTouchCoords(e: TouchEvent): TouchCoord {\n//   return {\n//     x: e.changedTouches[0].pageX,\n//     y: e.changedTouches[0].pageY\n//   };\n// }\n\n/**\n * Simulate a mouse event based on a corresponding touch event\n * @param {Object} e A touch event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulateMouseEvent(e: TouchEvent, simulatedType: string) {\n\n  // Ignore multi-touch events\n  if (e.touches.length > 1) return;\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const touch = e.changedTouches[0], simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    touch.screenX,    // screenX\n    touch.screenY,    // screenY\n    touch.clientX,    // clientX\n    touch.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n/**\n * Simulate a mouse event based on a corresponding Pointer event\n * @param {Object} e A pointer event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulatePointerMouseEvent(e: PointerEvent, simulatedType: string) {\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    e.screenX,    // screenX\n    e.screenY,    // screenY\n    e.clientX,    // clientX\n    e.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n\n/**\n * Handle the touchstart events\n * @param {Object} e The widget element's touchstart event\n */\nexport function touchstart(e: TouchEvent): void {\n  // Ignore the event if another widget is already being handled\n  if (DDTouch.touchHandled) return;\n  DDTouch.touchHandled = true;\n\n  // Simulate the mouse events\n  // simulateMouseEvent(e, 'mouseover');\n  // simulateMouseEvent(e, 'mousemove');\n  simulateMouseEvent(e, 'mousedown');\n}\n\n/**\n * Handle the touchmove events\n * @param {Object} e The document's touchmove event\n */\nexport function touchmove(e: TouchEvent): void {\n  // Ignore event if not handled by us\n  if (!DDTouch.touchHandled) return;\n\n  simulateMouseEvent(e, 'mousemove');\n}\n\n/**\n * Handle the touchend events\n * @param {Object} e The document's touchend event\n */\nexport function touchend(e: TouchEvent): void {\n\n  // Ignore event if not handled\n  if (!DDTouch.touchHandled) return;\n\n  // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\n  if (DDTouch.pointerLeaveTimeout) {\n    window.clearTimeout(DDTouch.pointerLeaveTimeout);\n    delete DDTouch.pointerLeaveTimeout;\n  }\n\n  const wasDragging = !!DDManager.dragElement;\n\n  // Simulate the mouseup event\n  simulateMouseEvent(e, 'mouseup');\n  // simulateMouseEvent(event, 'mouseout');\n\n  // If the touch interaction did not move, it should trigger a click\n  if (!wasDragging) {\n    simulateMouseEvent(e, 'click');\n  }\n\n  // Unset the flag to allow other widgets to inherit the touch event\n  DDTouch.touchHandled = false;\n}\n\n/**\n * Note we don't get touchenter/touchleave (which are deprecated)\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\n */\nexport function pointerdown(e: PointerEvent): void {\n  // console.log(\"pointer down\")\n  if (e.pointerType === 'mouse') return;\n  (e.target as HTMLElement).releasePointerCapture(e.pointerId) // <- Important!\n}\n\nexport function pointerenter(e: PointerEvent): void {\n  // ignore the initial one we get on pointerdown on ourself\n  if (!DDManager.dragElement) {\n    // console.log('pointerenter ignored');\n    return;\n  }\n  // console.log('pointerenter');\n  if (e.pointerType === 'mouse') return;\n  simulatePointerMouseEvent(e, 'mouseenter');\n}\n\nexport function pointerleave(e: PointerEvent): void {\n  // ignore the leave on ourself we get before releasing the mouse over ourself\n  // by delaying sending the event and having the up event cancel us\n  if (!DDManager.dragElement) {\n    // console.log('pointerleave ignored');\n    return;\n  }\n  if (e.pointerType === 'mouse') return;\n  DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\n    delete DDTouch.pointerLeaveTimeout;\n    // console.log('pointerleave delayed');\n    simulatePointerMouseEvent(e, 'mouseleave');\n  }, 10);\n}\n\n","/**\n * gridstack-engine.ts 10.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { Utils } from './utils';\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts, SaveFcn, CompactOptions } from './types';\n\n/** callback to update the DOM attributes since this class is generic (no HTML or other info) for items that changed - see _notify() */\ntype OnChangeCB = (nodes: GridStackNode[]) => void;\n\n/** options used during creation - similar to GridStackOptions */\nexport interface GridStackEngineOptions {\n  column?: number;\n  maxRow?: number;\n  float?: boolean;\n  nodes?: GridStackNode[];\n  onChange?: OnChangeCB;\n}\n\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nexport class GridStackEngine {\n  public column: number;\n  public maxRow: number;\n  public nodes: GridStackNode[];\n  public addedNodes: GridStackNode[] = [];\n  public removedNodes: GridStackNode[] = [];\n  public batchMode: boolean;\n  /** @internal callback to update the DOM attributes */\n  protected onChange: OnChangeCB;\n  /** @internal */\n  protected _float: boolean;\n  /** @internal */\n  protected _prevFloat: boolean;\n  /** @internal cached layouts of difference column count so we can restore back (eg 12 -> 1 -> 12) */\n  protected _layouts?: GridStackNode[][]; // maps column # to array of values nodes\n  /** @internal true while we are resizing widgets during column resize to skip certain parts */\n  protected _inColumnResize?: boolean;\n  /** @internal true if we have some items locked */\n  protected _hasLocked: boolean;\n  /** @internal unique global internal _id counter */\n  public static _idSeq = 0;\n\n  public constructor(opts: GridStackEngineOptions = {}) {\n    this.column = opts.column || 12;\n    this.maxRow = opts.maxRow;\n    this._float = opts.float;\n    this.nodes = opts.nodes || [];\n    this.onChange = opts.onChange;\n  }\n\n  public batchUpdate(flag = true, doPack = true): GridStackEngine {\n    if (!!this.batchMode === flag) return this;\n    this.batchMode = flag;\n    if (flag) {\n      this._prevFloat = this._float;\n      this._float = true; // let things go anywhere for now... will restore and possibly reposition later\n      this.cleanNodes();\n      this.saveInitial(); // since begin update (which is called multiple times) won't do this\n    } else {\n      this._float = this._prevFloat;\n      delete this._prevFloat;\n      if (doPack) this._packNodes();\n      this._notify();\n    }\n    return this;\n  }\n\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n  protected _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\n    return (!this.float || this.batchMode && !this._prevFloat) && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n  }\n\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n   * return true if we moved. */\n  protected _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\n    this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n    if (!collide) return false;\n\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n    if (node._moving && !opt.nested && !this.float) {\n      if (this.swap(node, collide)) return true;\n    }\n\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n    let area = nn;\n    if (this._useEntireRowArea(node, nn)) {\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n      collide = this.collide(node, area, opt.skip); // force new hit\n    }\n\n    let didMove = false;\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n      let moved: boolean;\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n      // but remember that skip down so we only do this once (and push others otherwise).\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n        // can take space we had, or before where we're going\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\n        node._skipDown = (node._skipDown || nn.y > node.y);\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\n        if (collide.locked && moved) {\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\n        } else if (!collide.locked && moved && opt.pack) {\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n          this._packNodes();\n          nn.y = collide.y + collide.h;\n          Utils.copyPos(node, nn);\n        }\n        didMove = didMove || moved;\n      } else {\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\n      }\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n      collide = undefined;\n    }\n    return didMove;\n  }\n\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode | undefined {\n    const skipId = skip._id;\n    const skip2Id = skip2?._id;\n    return this.nodes.find(n => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));\n  }\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\n    const skipId = skip._id;\n    const skip2Id = skip2?._id;\n    return this.nodes.filter(n => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));\n  }\n\n  /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */\n  protected directionCollideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode | undefined {\n    if (!o.rect || !node._rect) return;\n    let r0 = node._rect; // where started\n    let r = {...o.rect}; // where we are\n\n    // update dragged rect to show where it's coming from (above or below, etc...)\n    if (r.y > r0.y) {\n      r.h += r.y - r0.y;\n      r.y = r0.y;\n    } else {\n      r.h += r0.y - r.y;\n    }\n    if (r.x > r0.x) {\n      r.w += r.x - r0.x;\n      r.x = r0.x;\n    } else {\n      r.w += r0.x - r.x;\n    }\n\n    let collide: GridStackNode;\n    let overMax = 0.5; // need >50%\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let r2 = n._rect; // overlapping target\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE;\n      // depending on which side we started from, compute the overlap % of coverage\n      // (ex: from above/below we only compute the max horizontal line coverage)\n      if (r0.y < r2.y) { // from above\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\n      }\n      if (r0.x < r2.x) { // from the left\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\n      }\n      let over = Math.min(xOver, yOver);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    o.collide = collide; // save it so we don't have to find it again\n    return collide;\n  }\n\n  /** does a pixel coverage returning the node that has the most coverage by area */\n  /*\n  protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {\n    let collide: GridStackNode;\n    let overMax = 0;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let over = Utils.areaIntercept(r, n._rect);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    return {collide, over: overMax};\n  }\n  */\n\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\n  {\n    this.nodes.forEach(n =>\n      n._rect = {\n        y: n.y * h + top,\n        x: n.x * w + left,\n        w: n.w * w - left - right,\n        h: n.h * h - top - bottom\n      }\n    );\n    return this;\n  }\n\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n  public swap(a: GridStackNode, b: GridStackNode): boolean | undefined {\n    if (!b || b.locked || !a || a.locked) return false;\n\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\n      let x = b.x, y = b.y;\n      b.x = a.x; b.y = a.y; // b -> a position\n      if (a.h != b.h) {\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\n      } else if (a.w != b.w) {\n        a.x = b.x + b.w; a.y = y; // a -> goes after b\n      } else {\n        a.x = x; a.y = y; // a -> old b position\n      }\n      a._dirty = b._dirty = true;\n      return true;\n    }\n    let touching: boolean; // remember if we called it (vs undefined)\n\n    // same size and same row or column, and touching\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n      return _doSwap();\n    if (touching === false) return; // IFF ran test and fail, bail out\n\n    // check for taking same columns (but different height) and touching\n    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    if (touching === false) return;\n\n    // check if taking same row (but different width) and touching\n    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.x < a.x) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    return false;\n  }\n\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\n    return !this.collide(nn);\n  }\n\n  /** re-layout grid items to reclaim any empty space - optionally keeping the sort order exactly the same ('list' mode) vs truly finding an empty spaces */\n  public compact(layout: CompactOptions = 'compact', doSort = true): GridStackEngine {\n    if (this.nodes.length === 0) return this;\n    if (doSort) this.sortNodes();\n    const wasBatch = this.batchMode;\n    if (!wasBatch) this.batchUpdate();\n    const wasColumnResize = this._inColumnResize;\n    if (!wasColumnResize) this._inColumnResize = true; // faster addNode()\n    let copyNodes = this.nodes;\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n    copyNodes.forEach((n, index, list) => {\n      let after: GridStackNode;\n      if (!n.locked) {\n        n.autoPosition = true;\n        if (layout === 'list' && index) after = list[index - 1];\n      }\n      this.addNode(n, false, after); // 'false' for add event trigger\n    });\n    if (!wasColumnResize) delete this._inColumnResize;\n    if (!wasBatch) this.batchUpdate(false);\n    return this;\n  }\n\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n  public set float(val: boolean) {\n    if (this._float === val) return;\n    this._float = val || false;\n    if (!val) {\n      this._packNodes()._notify();\n    }\n  }\n\n  /** float getter method */\n  public get float(): boolean { return this._float || false; }\n\n  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n  public sortNodes(dir: 1 | -1 = 1, column = this.column): GridStackEngine {\n    this.nodes = Utils.sort(this.nodes, dir, column);\n    return this;\n  }\n\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n  protected _packNodes(): GridStackEngine {\n    if (this.batchMode) { return this; }\n    this.sortNodes(); // first to last\n\n    if (this.float) {\n      // restore original Y pos\n      this.nodes.forEach(n => {\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n        let newY = n.y;\n        while (newY > n._orig.y) {\n          --newY;\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!collide) {\n            n._dirty = true;\n            n.y = newY;\n          }\n        }\n      });\n    } else {\n      // top gravity pack\n      this.nodes.forEach((n, i) => {\n        if (n.locked) return;\n        while (n.y > 0) {\n          let newY = i === 0 ? 0 : n.y - 1;\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!canBeMoved) break;\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n          // and move items back. The user 'change' CB should detect changes from the original\n          // starting position instead.\n          n._dirty = (n.y !== newY);\n          n.y = newY;\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\n   * @param node to adjust\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\n   */\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\n    node._id = node._id ?? GridStackEngine._idSeq++;\n\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n      node.autoPosition = true;\n    }\n\n    // assign defaults for missing required fields\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\n    Utils.defaults(node, defaults);\n\n    if (!node.autoPosition) { delete node.autoPosition; }\n    if (!node.noResize) { delete node.noResize; }\n    if (!node.noMove) { delete node.noMove; }\n    Utils.sanitizeMinMax(node);\n\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n    if (typeof node.x == 'string') { node.x = Number(node.x); }\n    if (typeof node.y == 'string') { node.y = Number(node.y); }\n    if (typeof node.w == 'string') { node.w = Number(node.w); }\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\n    if (isNaN(node.x)) { node.x = defaults.x; node.autoPosition = true; }\n    if (isNaN(node.y)) { node.y = defaults.y; node.autoPosition = true; }\n    if (isNaN(node.w)) { node.w = defaults.w; }\n    if (isNaN(node.h)) { node.h = defaults.h; }\n\n    this.nodeBoundFix(node, resizing);\n    return node;\n  }\n\n  /** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackEngine {\n\n    let before = node._orig || Utils.copyPos({}, node);\n\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\n    if (node.minW && node.minW <= this.column) { node.w = Math.max(node.w, node.minW); }\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\n\n    // if user loaded a larger than allowed widget for current # of columns,\n    // remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985\n    // IFF we're not in the middle of column resizing!\n    const saveOrig = (node.x || 0) + (node.w || 1) > this.column;\n    if (saveOrig && this.column < 12 && !this._inColumnResize && node._id && this.findCacheLayout(node, 12) === -1) {\n      let copy = {...node}; // need _id + positions\n      if (copy.autoPosition || copy.x === undefined) { delete copy.x; delete copy.y; }\n      else copy.x = Math.min(11, copy.x);\n      copy.w = Math.min(12, copy.w || 1);\n      this.cacheOneLayout(copy, 12);\n    }\n\n    if (node.w > this.column) {\n      node.w = this.column;\n    } else if (node.w < 1) {\n      node.w = 1;\n    }\n\n    if (this.maxRow && node.h > this.maxRow) {\n      node.h = this.maxRow;\n    } else if (node.h < 1) {\n      node.h = 1;\n    }\n\n    if (node.x < 0) {\n      node.x = 0;\n    }\n    if (node.y < 0) {\n      node.y = 0;\n    }\n\n    if (node.x + node.w > this.column) {\n      if (resizing) {\n        node.w = this.column - node.x;\n      } else {\n        node.x = this.column - node.w;\n      }\n    }\n    if (this.maxRow && node.y + node.h > this.maxRow) {\n      if (resizing) {\n        node.h = this.maxRow - node.y;\n      } else {\n        node.y = this.maxRow - node.h;\n      }\n    }\n\n    if (!Utils.samePos(node, before)) {\n      node._dirty = true;\n    }\n\n    return this;\n  }\n\n  /** returns a list of modified nodes from their original values */\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\n    // compare original x,y,w,h instead as _dirty can be a temporary state\n    if (verify) {\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n    }\n    return this.nodes.filter(n => n._dirty);\n  }\n\n  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n  protected _notify(removedNodes?: GridStackNode[]): GridStackEngine {\n    if (this.batchMode || !this.onChange) return this;\n    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n    this.onChange(dirtyNodes);\n    return this;\n  }\n\n  /** @internal remove dirty and last tried info */\n  public cleanNodes(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.nodes.forEach(n => {\n      delete n._dirty;\n      delete n._lastTried;\n    });\n    return this;\n  }\n\n  /** @internal called to save initial position/size to track real dirty state.\n   * Note: should be called right after we call change event (so next API is can detect changes)\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n  public saveInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      n._orig = Utils.copyPos({}, n);\n      delete n._dirty;\n    });\n    this._hasLocked = this.nodes.some(n => n.locked);\n    return this;\n  }\n\n  /** @internal restore all the nodes back to initial values (called when we leave) */\n  public restoreInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      if (Utils.samePos(n, n._orig)) return;\n      Utils.copyPos(n, n._orig);\n      n._dirty = true;\n    });\n    this._notify();\n    return this;\n  }\n\n  /** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found.\n   * optionally you can pass your own existing node list and column count, otherwise defaults to that engine data.\n   * Optionally pass a widget to start search AFTER, meaning the order will remain the same but possibly have empty slots we skipped\n   */\n  public findEmptyPosition(node: GridStackNode, nodeList = this.nodes, column = this.column, after?: GridStackNode): boolean {\n    let start = after ? after.y * column + (after.x + after.w) : 0;\n    let found = false;\n    for (let i = start; !found; ++i) {\n      let x = i % column;\n      let y = Math.floor(i / column);\n      if (x + node.w > column) {\n        continue;\n      }\n      let box = {x, y, w: node.w, h: node.h};\n      if (!nodeList.find(n => Utils.isIntercepted(box, n))) {\n        if (node.x !== x || node.y !== y) node._dirty = true;\n        node.x = x;\n        node.y = y;\n        delete node.autoPosition;\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /** call to add the given node to our list, fixing collision and re-packing */\n  public addNode(node: GridStackNode, triggerAddEvent = false, after?: GridStackNode): GridStackNode {\n    let dup = this.nodes.find(n => n._id === node._id);\n    if (dup) return dup; // prevent inserting twice! return it instead.\n\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n    this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n    delete node._temporaryRemoved;\n    delete node._removeDOM;\n\n    let skipCollision: boolean;\n    if (node.autoPosition && this.findEmptyPosition(node, this.nodes, this.column, after)) {\n      delete node.autoPosition; // found our slot\n      skipCollision = true;\n    }\n\n    this.nodes.push(node);\n    if (triggerAddEvent) { this.addedNodes.push(node); }\n\n    if (!skipCollision) this._fixCollisions(node);\n    if (!this.batchMode) { this._packNodes()._notify(); }\n    return node;\n  }\n\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\n    if (!this.nodes.find(n => n._id === node._id)) {\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n      return this;\n    }\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n      this.removedNodes.push(node);\n    }\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n    this.nodes = this.nodes.filter(n => n._id !== node._id);\n    if (!node._isAboutToRemove) this._packNodes(); // if dragged out, no need to relayout as already done...\n    this._notify([node]);\n    return this;\n  }\n\n  public removeAll(removeDOM = true): GridStackEngine {\n    delete this._layouts;\n    if (!this.nodes.length) return this;\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    this.removedNodes = this.nodes;\n    this.nodes = [];\n    return this._notify(this.removedNodes);\n  }\n\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n   * others in a clone first, then apply those changes if still within specs. */\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    // if (node.locked) return false;\n    if (!this.changedPosConstrain(node, o)) return false;\n    o.pack = true;\n\n    // simpler case: move item directly...\n    if (!this.maxRow) {\n      return this.moveNode(node, o);\n    }\n\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n    let clonedNode: GridStackNode;\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        if (n._id === node._id) {\n          clonedNode = {...n};\n          return clonedNode;\n        }\n        return {...n};\n      })\n    });\n    if (!clonedNode) return false;\n\n    // check if we're covering 50% collision and could move, while still being under maxRow or at least not making it worse\n    // (case where widget was somehow added past our max #2449)\n    let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= Math.max(this.getRow(), this.maxRow);\n    // else check if we can force a swap (float=true, or different shapes) on non-resize\n    if (!canMove && !o.resizing && o.collide) {\n      let collide = o.collide.el.gridstackNode; // find the source node the clone collided with at 50%\n      if (this.swap(node, collide)) { // swaps and mark dirty\n        this._notify();\n        return true;\n      }\n    }\n    if (!canMove) return false;\n\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n    clone.nodes.filter(n => n._dirty).forEach(c => {\n      let n = this.nodes.find(a => a._id === c._id);\n      if (!n) return;\n      Utils.copyPos(n, c);\n      n._dirty = true;\n    });\n    this._notify();\n    return true;\n  }\n\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\n  public willItFit(node: GridStackNode): boolean {\n    delete node._willFitPos;\n    if (!this.maxRow) return true;\n    // create a clone with NO maxRow and check if still within size\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {return {...n}})\n    });\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n    this.cleanupNode(n);\n    delete n.el; delete n._id; delete n.content; delete n.grid;\n    clone.addNode(n);\n    if (clone.getRow() <= this.maxRow) {\n      node._willFitPos = Utils.copyPos({}, n);\n      return true;\n    }\n    return false;\n  }\n\n  /** true if x,y or w,h are different after clamping to min/max */\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\n    // first make sure w,h are set for caller\n    p.w = p.w || node.w;\n    p.h = p.h || node.h;\n    if (node.x !== p.x || node.y !== p.y) return true;\n    // check constrained w,h\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\n    return (node.w !== p.w || node.h !== p.h);\n  }\n\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    if (!node || /*node.locked ||*/ !o) return false;\n    let wasUndefinedPack: boolean;\n    if (o.pack === undefined && !this.batchMode) {\n      wasUndefinedPack = o.pack = true;\n    }\n\n    // constrain the passed in values and check if we're still changing our node\n    if (typeof o.x !== 'number') { o.x = node.x; }\n    if (typeof o.y !== 'number') { o.y = node.y; }\n    if (typeof o.w !== 'number') { o.w = node.w; }\n    if (typeof o.h !== 'number') { o.h = node.h; }\n    let resizing = (node.w !== o.w || node.h !== o.h);\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n    Utils.copyPos(nn, o);\n    this.nodeBoundFix(nn, resizing);\n    Utils.copyPos(o, nn);\n\n    if (!o.forceCollide && Utils.samePos(node, o)) return false;\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\n\n    // check if we will need to fix collision at our new location\n    let collides = this.collideAll(node, nn, o.skip);\n    let needToMove = true;\n    if (collides.length) {\n      let activeDrag = node._moving && !o.nested;\n      // check to make sure we actually collided over 50% surface area while dragging\n      let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];\n      // if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that\n      if (activeDrag && collide && node.grid?.opts?.subGridDynamic && !node.grid._isTemp) {\n        let over = Utils.areaIntercept(o.rect, collide._rect);\n        let a1 = Utils.area(o.rect);\n        let a2 = Utils.area(collide._rect);\n        let perc = over / (a1 < a2 ? a1 : a2);\n        if (perc > .8) {\n          collide.grid.makeSubGrid(collide.el, undefined, node);\n          collide = undefined;\n        }\n      }\n\n      if (collide) {\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n      } else {\n        needToMove = false; // we didn't cover >50% for a move, skip...\n        if (wasUndefinedPack) delete o.pack;\n      }\n    }\n\n    // now move (to the original ask vs the collision version which might differ) and repack things\n    if (needToMove) {\n      node._dirty = true;\n      Utils.copyPos(node, nn);\n    }\n    if (o.pack) {\n      this._packNodes()\n        ._notify();\n    }\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\n  }\n\n  public getRow(): number {\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n  }\n\n  public beginUpdate(node: GridStackNode): GridStackEngine {\n    if (!node._updating) {\n      node._updating = true;\n      delete node._skipDown;\n      if (!this.batchMode) this.saveInitial();\n    }\n    return this;\n  }\n\n  public endUpdate(): GridStackEngine {\n    let n = this.nodes.find(n => n._updating);\n    if (n) {\n      delete n._updating;\n      delete n._skipDown;\n    }\n    return this;\n  }\n\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,\n   * returning a list of widgets for serialization */\n  public save(saveElement = true, saveCB?: SaveFcn): GridStackNode[] {\n    // use the highest layout for any saved info so we can have full detail on reload #1849\n    let len = this._layouts?.length;\n    let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n    let list: GridStackNode[] = [];\n    this.sortNodes();\n    this.nodes.forEach(n => {\n      let wl = layout?.find(l => l._id === n._id);\n      // use layout info fields instead if set\n      let w: GridStackNode = {...n, ...(wl || {})};\n      Utils.removeInternalForSave(w, !saveElement);\n      if (saveCB) saveCB(n, w);\n      list.push(w);\n    });\n    return list;\n  }\n\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\n    if (!this._layouts || this._inColumnResize) return this;\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n    this._layouts.forEach((layout, column) => {\n      if (!layout || column === this.column) return this;\n      if (column < this.column) {\n        this._layouts[column] = undefined;\n      }\n      else {\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n        let ratio = column / this.column;\n        nodes.forEach(node => {\n          if (!node._orig) return; // didn't change (newly added ?)\n          let n = layout.find(l => l._id === node._id);\n          if (!n) return; // no cache for new nodes. Will use those values.\n          // Y changed, push down same amount\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n          if (n.y >= 0 && node.y !== node._orig.y) {\n            n.y += (node.y - node._orig.y);\n          }\n          // X changed, scale from new position\n          if (node.x !== node._orig.x) {\n            n.x = Math.round(node.x * ratio);\n          }\n          // width changed, scale from new width\n          if (node.w !== node._orig.w) {\n            n.w = Math.round(node.w * ratio);\n          }\n          // ...height always carries over from cache\n        });\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @internal Called to scale the widget width & position up/down based on the column change.\n   * Note we store previous layouts (especially original ones) to make it possible to go\n   * from say 12 -> 1 -> 12 and get back to where we were.\n   *\n   * @param prevColumn previous number of columns\n   * @param column  new column number\n   * @param nodes different sorted list (ex: DOM order) instead of current list\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n   */\n  public columnChanged(prevColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\n    if (!this.nodes.length || !column || prevColumn === column) return this;\n\n    // simpler shortcuts layouts\n    const doCompact = layout === 'compact' || layout === 'list';\n    if (doCompact) {\n      this.sortNodes(1, prevColumn); // sort with original layout once and only once (new column will affect order otherwise)\n    }\n\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data IFF we're sizing down (see below)\n    if (column < prevColumn) this.cacheLayout(this.nodes, prevColumn);\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n    let newNodes: GridStackNode[] = [];\n\n    // if we're going to 1 column and using DOM order (item passed in) rather than default sorting, then generate that layout\n    let domOrder = false;\n    if (column === 1 && nodes?.length) {\n      domOrder = true;\n      let top = 0;\n      nodes.forEach(n => {\n        n.x = 0;\n        n.w = 1;\n        n.y = Math.max(n.y, top);\n        top = n.y + n.h;\n      });\n      newNodes = nodes;\n      nodes = [];\n    } else {\n      nodes = doCompact ? this.nodes : Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n    }\n\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n    // generate next size down from where we are (looks more natural as you gradually size down).\n    if (column > prevColumn && this._layouts) {\n      const cacheNodes = this._layouts[column] || [];\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n      // by pretending we came from that larger column by assigning those values as starting point\n      let lastIndex = this._layouts.length - 1;\n      if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n        prevColumn = lastIndex;\n        this._layouts[lastIndex].forEach(cacheNode => {\n          let n = nodes.find(n => n._id === cacheNode._id);\n          if (n) {\n            // still current, use cache info positions\n            if (!doCompact && !cacheNode.autoPosition) {\n              n.x = cacheNode.x ?? n.x;\n              n.y = cacheNode.y ?? n.y;\n            }\n            n.w = cacheNode.w ?? n.w;\n            if (cacheNode.x == undefined || cacheNode.y === undefined) n.autoPosition = true;\n          }\n        });\n      }\n\n      // if we found cache re-use those nodes that are still current\n      cacheNodes.forEach(cacheNode => {\n        let j = nodes.findIndex(n => n._id === cacheNode._id);\n        if (j !== -1) {\n          const n = nodes[j];\n          // still current, use cache info positions\n          if (doCompact) {\n            n.w = cacheNode.w; // only w is used, and don't trim the list\n            return;\n          }\n          if (cacheNode.autoPosition || isNaN(cacheNode.x) || isNaN(cacheNode.y)) {\n            this.findEmptyPosition(cacheNode, newNodes);\n          }\n          if (!cacheNode.autoPosition) {\n            n.x = cacheNode.x ?? n.x;\n            n.y = cacheNode.y ?? n.y;\n            n.w = cacheNode.w ?? n.w;\n            newNodes.push(n);\n          }\n          nodes.splice(j, 1);\n        }\n      });\n    }\n\n    // much simpler layout that just compacts\n    if (doCompact) {\n      this.compact(layout, false);\n    } else {\n      // ...and add any extra non-cached ones\n      if (nodes.length) {\n        if (typeof layout === 'function') {\n          layout(column, prevColumn, newNodes, nodes);\n        } else if (!domOrder) {\n          let ratio = (doCompact || layout === 'none') ? 1 : column / prevColumn;\n          let move = (layout === 'move' || layout === 'moveScale');\n          let scale = (layout === 'scale' || layout === 'moveScale');\n          nodes.forEach(node => {\n            // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n            node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n            node.w = ((column === 1 || prevColumn === 1) ? 1 : scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n            newNodes.push(node);\n          });\n          nodes = [];\n        }\n      }\n\n      // finally re-layout them in reverse order (to get correct placement)\n      if (!domOrder) newNodes = Utils.sort(newNodes, -1, column);\n      this._inColumnResize = true; // prevent cache update\n      this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n      newNodes.forEach(node => {\n        this.addNode(node, false); // 'false' for add event trigger\n        delete node._orig; // make sure the commit doesn't try to restore things back to original\n      });\n    }\n\n    this.nodes.forEach(n => delete n._orig); // clear _orig before batch=false so it doesn't handle float=true restore\n    this.batchUpdate(false, !doCompact);\n    delete this._inColumnResize;\n    return this;\n  }\n\n  /**\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\n   * @param nodes list of nodes\n   * @param column corresponding column index to save it under\n   * @param clear if true, will force other caches to be removed (default false)\n   */\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\n    let copy: GridStackNode[] = [];\n    nodes.forEach((n, i) => {\n      // make sure we have an id in case this is new layout, else re-use id already set\n      if (n._id === undefined) {\n        const existing = n.id ? this.nodes.find(n2 => n2.id === n.id) : undefined; // find existing node using users id\n        n._id = existing?._id ?? GridStackEngine._idSeq++;\n      }\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\n    });\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n    this._layouts[column] = copy;\n    return this;\n  }\n\n  /**\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\n   * @param node single node to cache\n   * @param column corresponding column index to save it under\n   */\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\n    n._id = n._id ?? GridStackEngine._idSeq++;\n    let l: GridStackNode = {x: n.x, y: n.y, w: n.w, _id: n._id}\n    if (n.autoPosition || n.x === undefined) { delete l.x; delete l.y; if (n.autoPosition) l.autoPosition = true; }\n    this._layouts = this._layouts || [];\n    this._layouts[column] = this._layouts[column] || [];\n    let index = this.findCacheLayout(n, column);\n    if (index === -1)\n      this._layouts[column].push(l);\n    else\n      this._layouts[column][index] = l;\n    return this;\n  }\n\n  protected findCacheLayout(n: GridStackNode, column: number): number | undefined {\n    return this._layouts?.[column]?.findIndex(l => l._id === n._id) ?? -1;\n  }\n\n  public removeNodeFromLayoutCache(n: GridStackNode) {\n    if (!this._layouts) {\n      return;\n    }\n    for (let i = 0; i < this._layouts.length; i++) {\n      let index = this.findCacheLayout(n, i);\n      if (index !== -1) {\n        this._layouts[i].splice(index, 1);\n      }\n    }\n  }\n\n  /** called to remove all internal values but the _id */\n  public cleanupNode(node: GridStackNode): GridStackEngine {\n    for (let prop in node) {\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\n    }\n    return this;\n  }\n}\n","/*!\r\n * GridStack 10.0.1\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021-2022 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData, obsolete } from './utils';\r\nimport { gridDefaults, ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition, GridStackOptions,\r\n  dragInDefaultOptions, GridStackEventHandler, GridStackNodesHandler, AddRemoveFcn, SaveFcn, CompactOptions, GridStackMoveOpts, ResizeToContentFcn } from './types';\r\n\r\n/*\r\n * and include D&D by default\r\n * TODO: while we could generate a gridstack-static.js at smaller size - saves about 31k (41k -> 72k)\r\n * I don't know how to generate the DD only code at the remaining 31k to delay load as code depends on Gridstack.ts\r\n * also it caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\r\n */\r\nimport { DDGridStack } from './dd-gridstack';\r\nimport { isTouch } from './dd-touch';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElementHost } from './dd-element';/** global instance */\r\nconst dd = new DDGridStack;\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './dd-gridstack';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\n/** list of possible events, or space separated list of them */\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop' | 'resizecontent' | string;\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _max?: number; // internal tracker of the max # of rows we created\r\n}\r\n\r\n// extend with internal fields we need - TODO: move other items in here\r\ninterface InternalGridStackOptions extends GridStackOptions {\r\n  _alwaysShowResizeHandle?: true | false | 'mobile'; // so we can restore for save\r\n}\r\n\r\n// temporary legacy (<10.x) support\r\ninterface OldOneColumnOpts extends GridStackOptions {\r\n  /** disables the onColumnMode when the grid width is less (default?: false) */\r\n  disableOneColumnMode?: boolean;\r\n  /** minimal width before grid will be shown in one column mode (default?: 768) */\r\n  oneColumnSize?: number;\r\n  /** set to true if you want oneColumnMode to use the DOM order and ignore x,y from normal multi column\r\n   layouts during sorting. This enables you to have custom 1 column layout that differ from the rest. (default?: false) */\r\n  oneColumnModeDomSort?: boolean;\r\n}\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    let el = parent as GridHTMLElement;\r\n    if (el.gridstack) {\r\n      // already a grid - set option and load data\r\n      const grid = el.gridstack;\r\n      if (opt) grid.opts = {...grid.opts, ...opt};\r\n      if (opt.children !== undefined) grid.load(opt.children);\r\n      return grid;\r\n    }\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    const parentIsGrid = parent.classList.contains('grid-stack');\r\n    if (!parentIsGrid || GridStack.addRemoveCB) {\r\n      if (GridStack.addRemoveCB) {\r\n        el = GridStack.addRemoveCB(parent, opt, true, true);\r\n      } else {\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n        el = doc.body.children[0] as HTMLElement;\r\n        parent.appendChild(el);\r\n      }\r\n    }\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    return grid;\r\n  }\r\n\r\n  /** call this method to register your engine instead of the default one.\r\n   * See instead `GridStackOptions.engineClass` if you only need to\r\n   * replace just one instance.\r\n   */\r\n  static registerEngine(engineClass: typeof GridStackEngine): void {\r\n    GridStack.engineClass = engineClass;\r\n  }\r\n\r\n  /**\r\n   * callback method use when new items|grids needs to be created or deleted, instead of the default\r\n   * item: <div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">w.content</div></div>\r\n   * grid: <div class=\"grid-stack\">grid content...</div>\r\n   * add = true: the returned DOM element will then be converted to a GridItemHTMLElement using makeWidget()|GridStack:init().\r\n   * add = false: the item will be removed from DOM (if not already done)\r\n   * grid = true|false for grid vs grid-items\r\n   */\r\n  public static addRemoveCB?: AddRemoveFcn;\r\n\r\n  /**\r\n   * callback during saving to application can inject extra data for each widget, on top of the grid layout properties\r\n   */\r\n  public static saveCB?: SaveFcn;\r\n\r\n  /** callback to use for resizeToContent instead of the built in one */\r\n  public static resizeToContentCB?: ResizeToContentFcn;\r\n  /** parent class for sizing content. defaults to '.grid-stack-item-content' */\r\n  public static resizeToContentParent = '.grid-stack-item-content';\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  /** point to a parent grid item if we're nested (inside a grid-item in between 2 Grids) */\r\n  public parentGridItem?: GridStackNode;\r\n\r\n  protected static engineClass: typeof GridStackEngine;\r\n  protected resizeObserver: ResizeObserver;\r\n\r\n  /** @internal unique class name for our generated CSS style sheet */\r\n  protected _styleSheetClass?: string;\r\n  /** @internal true if we got created by drag over gesture, so we can removed on drag out (temporary) */\r\n  public _isTemp?: boolean;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, gridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  protected _placeholder: HTMLElement;\r\n  /** @internal prevent cached layouts from being updated when loading into small column layouts */\r\n  protected _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  protected _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  protected _isAutoCellHeight: boolean;\r\n  /** @internal limit auto cell resizing method */\r\n  protected _sizeThrottle: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  protected prevWidth: number;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  protected _insertNotAppend: boolean;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  protected _extraDragRow = 0;\r\n  /** @internal true if nested grid should get column count from our width */\r\n  protected _autoColumn?: boolean;\r\n  private _skipInitialResize: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    el.gridstack = this;\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    if (!el.classList.contains('grid-stack')) {\r\n      this.el.classList.add('grid-stack');\r\n    }\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // flag only valid in sub-grids (handled by parent, not here)\r\n    if (opts.column === 'auto') {\r\n      delete opts.column;\r\n    }\r\n    // save original setting so we can restore on save\r\n    if (opts.alwaysShowResizeHandle !== undefined) {\r\n      (opts as InternalGridStackOptions)._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;\r\n    }\r\n    let bk = opts.columnOpts?.breakpoints;\r\n    // LEGACY: oneColumnMode stuff changed in v10.x - check if user explicitly set something to convert over\r\n    const oldOpts: OldOneColumnOpts = opts;\r\n    if (oldOpts.oneColumnModeDomSort) {\r\n      delete oldOpts.oneColumnModeDomSort;\r\n      console.log('Error: Gridstack oneColumnModeDomSort no longer supported. Check GridStackOptions.columnOpts instead.')\r\n    }\r\n    if (oldOpts.oneColumnSize || oldOpts.disableOneColumnMode === false) {\r\n      const oneSize = oldOpts.oneColumnSize || 768;\r\n      delete oldOpts.oneColumnSize;\r\n      delete oldOpts.disableOneColumnMode;\r\n      opts.columnOpts = opts.columnOpts || {};\r\n      bk = opts.columnOpts.breakpoints = opts.columnOpts.breakpoints || [];\r\n      let oneColumn = bk.find(b => b.c === 1);\r\n      if (!oneColumn) {\r\n        oneColumn = {c: 1, w: oneSize};\r\n        bk.push(oneColumn, {c: 12, w: oneSize+1});\r\n      } else oneColumn.w = oneSize;\r\n    }\r\n    //...end LEGACY\r\n    // cleanup responsive opts (must have columnWidth | breakpoints) then sort breakpoints by size (so we can match during resize)\r\n    const resp = opts.columnOpts;\r\n    if (resp) {\r\n      if (!resp.columnWidth && !resp.breakpoints?.length) {\r\n        delete opts.columnOpts;\r\n        bk = undefined;\r\n      } else {\r\n        resp.columnMax = resp.columnMax || 12;\r\n      }\r\n    }\r\n    if (bk?.length > 1) bk.sort((a,b) => (b.w || 0) - (a.w || 0));\r\n\r\n    // elements DOM attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...Utils.cloneDeep(gridDefaults),\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || gridDefaults.column,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || gridDefaults.minRow,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || gridDefaults.maxRow,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || gridDefaults.staticGrid,\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || gridDefaults.draggable.handle,\r\n      },\r\n      removableOptions: {\r\n        accept: opts.itemClass || gridDefaults.removableOptions.accept,\r\n        decline: gridDefaults.removableOptions.decline\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this._initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    this.checkDynamicColumn();\r\n    this.el.classList.add('gs-' + this.opts.column);\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    const grandParent: GridItemHTMLElement = this.el.parentElement?.parentElement;\r\n    let parentGridItem = grandParent?.classList.contains(gridDefaults.itemClass) ? grandParent.gridstackNode : undefined;\r\n    if (parentGridItem) {\r\n      parentGridItem.subGrid = this;\r\n      this.parentGridItem = parentGridItem;\r\n      this.el.classList.add('grid-stack-nested');\r\n      parentGridItem.el.classList.add('grid-stack-sub-grid');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      // append unit if any are set\r\n      if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== gridDefaults.cellHeightUnit) {\r\n        this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\r\n        delete this.opts.cellHeightUnit;\r\n      }\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    // see if we need to adjust auto-hide\r\n    if (this.opts.alwaysShowResizeHandle === 'mobile') {\r\n      this.opts.alwaysShowResizeHandle = isTouch;\r\n    }\r\n\r\n    this._styleSheetClass = 'gs-id-' + GridStackEngine._idSeq++;\r\n    this.el.classList.add(this._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    let engineClass = this.opts.engineClass || GridStack.engineClass || GridStackEngine;\r\n    this.engine = new engineClass({\r\n      column: this.getColumn(),\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (!el) return;\r\n          if (n._removeDOM) {\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    // create initial global styles BEFORE loading children so resizeToContent margin can be calculated correctly\r\n    this._updateStyles(false, 0);\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      this.getGridItems().forEach(el => this._prepareElement(el));\r\n      this.batchUpdate(false);\r\n    }\r\n\r\n    // load any passed in children as well, which overrides any DOM layout done above\r\n    if (this.opts.children) {\r\n      let children = this.opts.children;\r\n      delete this.opts.children;\r\n      if (children.length) this.load(children); // don't load empty\r\n    }\r\n\r\n    // if (this.engine.nodes.length) this._updateStyles(); // update based on # of children. done in engine onChange CB\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    // dynamic grids require pausing during drag to detect over to nest vs push\r\n    if (this.opts.subGridDynamic && !DDManager.pauseDrag) DDManager.pauseDrag = true;\r\n    if (this.opts.draggable?.pause !== undefined) DDManager.pauseDrag = this.opts.draggable.pause;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n    function isGridStackWidget(w: GridStackNode): w is GridStackNode { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.el !== undefined || w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: GridItemHTMLElement;\r\n    let node: GridStackNode;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      node = options = els;\r\n      if (node?.el) {\r\n        el = node.el; // re-use element stored in the node\r\n      } else if (GridStack.addRemoveCB) {\r\n        el = GridStack.addRemoveCB(this.el, options, true, false);\r\n      } else {\r\n        let content = options?.content || '';\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n        el = doc.body.children[0] as HTMLElement;\r\n      }\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    if (!el) return;\r\n\r\n    // if the caller ended up initializing the widget in addRemoveCB, or we stared with one already, skip the rest\r\n    node = el.gridstackNode;\r\n    if (node && el.parentElement === this.el && this.engine.nodes.find(n => n._id === node._id)) return el;\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz') before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = Utils.cloneDeep(options) || {};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    node = this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    this.makeWidget(el, options);\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them\r\n   * from the parent's subGrid options.\r\n   * @param el gridItem element to convert\r\n   * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults\r\n   * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)\r\n   * @returns newly created grid\r\n   */\r\n  public makeSubGrid(el: GridItemHTMLElement, ops?: GridStackOptions, nodeToAdd?: GridStackNode, saveContent = true): GridStack {\r\n    let node = el.gridstackNode;\r\n    if (!node) {\r\n      node = this.makeWidget(el).gridstackNode;\r\n    }\r\n    if (node.subGrid?.el) return node.subGrid; // already done\r\n\r\n    // find the template subGrid stored on a parent as fallback...\r\n    let subGridTemplate: GridStackOptions; // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    let grid: GridStack = this;\r\n    while (grid && !subGridTemplate) {\r\n      subGridTemplate = grid.opts?.subGridOpts;\r\n      grid = grid.parentGridItem?.grid;\r\n    }\r\n    //... and set the create options\r\n    ops = Utils.cloneDeep({...(subGridTemplate || {}), children: undefined, ...(ops || node.subGridOpts)});\r\n    node.subGridOpts = ops;\r\n\r\n    // if column special case it set, remember that flag and set default\r\n    let autoColumn: boolean;\r\n    if (ops.column === 'auto') {\r\n      autoColumn = true;\r\n      ops.column = Math.max(node.w || 1, nodeToAdd?.w || 1);\r\n      delete ops.columnOpts; // driven by parent\r\n    }\r\n\r\n    // if we're converting an existing full item, move over the content to be the first sub item in the new grid\r\n    let content = node.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n    let newItem: HTMLElement;\r\n    let newItemOpt: GridStackNode;\r\n    if (saveContent) {\r\n      this._removeDD(node.el); // remove D&D since it's set on content div\r\n      newItemOpt = {...node, x:0, y:0};\r\n      Utils.removeInternalForSave(newItemOpt);\r\n      delete newItemOpt.subGridOpts;\r\n      if (node.content) {\r\n        newItemOpt.content = node.content;\r\n        delete node.content;\r\n      }\r\n      if (GridStack.addRemoveCB) {\r\n        newItem = GridStack.addRemoveCB(this.el, newItemOpt, true, false);\r\n      } else {\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item\"></div>`;\r\n        newItem = doc.body.children[0] as HTMLElement;\r\n        newItem.appendChild(content);\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item-content\"></div>`;\r\n        content = doc.body.children[0] as HTMLElement;\r\n        node.el.appendChild(content);\r\n      }\r\n      this._prepareDragDropByNode(node); // ... and restore original D&D\r\n    }\r\n\r\n    // if we're adding an additional item, make the container large enough to have them both\r\n    if (nodeToAdd) {\r\n      let w = autoColumn ? ops.column : node.w;\r\n      let h = node.h + nodeToAdd.h;\r\n      let style = node.el.style;\r\n      style.transition = 'none'; // show up instantly so we don't see scrollbar with nodeToAdd\r\n      this.update(node.el, {w, h});\r\n      setTimeout(() =>  style.transition = null); // recover animation\r\n    }\r\n\r\n    let subGrid = node.subGrid = GridStack.addGrid(content, ops);\r\n    if (nodeToAdd?._moving) subGrid._isTemp = true; // prevent re-nesting as we add over\r\n    if (autoColumn) subGrid._autoColumn = true;\r\n\r\n    // add the original content back as a child of hte newly created grid\r\n    if (saveContent) {\r\n      subGrid.addWidget(newItem, newItemOpt);\r\n    }\r\n\r\n    // now add any additional node\r\n    if (nodeToAdd) {\r\n      if (nodeToAdd._moving) {\r\n        // create an artificial event even for the just created grid to receive this item\r\n        window.setTimeout(() => Utils.simulateMouseEvent(nodeToAdd._event, 'mouseenter', subGrid.el), 0);\r\n      } else {\r\n        subGrid.addWidget(node.el, node);\r\n      }\r\n    }\r\n    return subGrid;\r\n  }\r\n\r\n  /**\r\n   * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back\r\n   * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)\r\n   */\r\n  public removeAsSubGrid(nodeThatRemoved?: GridStackNode): void {\r\n    let pGrid = this.parentGridItem?.grid;\r\n    if (!pGrid) return;\r\n\r\n    pGrid.batchUpdate();\r\n    pGrid.removeWidget(this.parentGridItem.el, true, true);\r\n    this.engine.nodes.forEach(n => {\r\n      // migrate any children over and offsetting by our location\r\n      n.x += this.parentGridItem.x;\r\n      n.y += this.parentGridItem.y;\r\n      pGrid.addWidget(n.el, n);\r\n    });\r\n    pGrid.batchUpdate(false);\r\n    if (this.parentGridItem) delete this.parentGridItem.subGrid;\r\n    delete this.parentGridItem;\r\n\r\n    // create an artificial event for the original grid now that this one is gone (got a leave, but won't get enter)\r\n    if (nodeThatRemoved) {\r\n      window.setTimeout(() => Utils.simulateMouseEvent(nodeThatRemoved._event, 'mouseenter', pGrid.el), 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n   * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n   * be removed.\r\n   * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n   * @param saveCB callback for each node -> widget, so application can insert additional data to be saved into the widget data structure.\r\n   * @returns list of widgets or full grid option, including .children list of widgets\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false, saveCB = GridStack.saveCB): GridStackWidget[] | GridStackOptions {\r\n    // return copied GridStackWidget (with optionally .el) we can modify at will...\r\n    let list = this.engine.save(saveContent, saveCB);\r\n\r\n    // check for HTML content and nested grids\r\n    list.forEach(n => {\r\n      if (saveContent && n.el && !n.subGrid && !saveCB) { // sub-grid are saved differently, not plain content\r\n        let sub = n.el.querySelector('.grid-stack-item-content');\r\n        n.content = sub ? sub.innerHTML : undefined;\r\n        if (!n.content) delete n.content;\r\n      } else {\r\n        if (!saveContent && !saveCB) { delete n.content; }\r\n        // check for nested grid\r\n        if (n.subGrid?.el) {\r\n          const listOrOpt = n.subGrid.save(saveContent, saveGridOpt, saveCB);\r\n          n.subGridOpts = (saveGridOpt ? listOrOpt : {children: listOrOpt}) as GridStackOptions;\r\n          delete n.subGrid;\r\n        }\r\n      }\r\n      delete n.el;\r\n    });\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n      let o: InternalGridStackOptions = Utils.cloneDeep(this.opts);\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) {\r\n        o.cellHeight = 'auto'\r\n      }\r\n      if (this._autoColumn) {\r\n        o.column = 'auto';\r\n      }\r\n      const origShow = o._alwaysShowResizeHandle;\r\n      delete o._alwaysShowResizeHandle;\r\n      if (origShow !== undefined) {\r\n        o.alwaysShowResizeHandle = origShow;\r\n      } else {\r\n        delete o.alwaysShowResizeHandle;\r\n      }\r\n      Utils.removeInternalAndSame(o, gridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   */\r\n  public load(items: GridStackWidget[], addRemove: boolean | AddRemoveFcn = GridStack.addRemoveCB || true): GridStack {\r\n    items = Utils.cloneDeep(items); // so we can mod\r\n    const column = this.getColumn();\r\n\r\n    // if passed list has coordinates, use them (insert from end to beginning for conflict resolution) else keep widget order\r\n    const haveCoord = items.some(w => w.x !== undefined || w.y !== undefined);\r\n    if (haveCoord) items = Utils.sort(items, -1, column);\r\n    this._insertNotAppend = haveCoord; // if we create in reverse order...\r\n\r\n    // if we're loading a layout into for example 1 column and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (items.some(n => ((n.x || 0) + (n.w || 1)) > column)) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, 12, true); // TODO: 12 is arbitrary. use max value in layout ?\r\n    }\r\n\r\n    // if given a different callback, temporally set it as global option so creating will use it\r\n    const prevCB = GridStack.addRemoveCB;\r\n    if (typeof(addRemove) === 'function') GridStack.addRemoveCB = addRemove as AddRemoveFcn;\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // if we are blank (loading into empty like startup) temp remove animation\r\n    const noAnim = !this.engine.nodes.length;\r\n    if (noAnim) this.setAnimation(false);\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        if (!n.id) return;\r\n        let item = Utils.find(items, n.id);\r\n        if (!item) {\r\n          if (GridStack.addRemoveCB)\r\n            GridStack.addRemoveCB(this.el, n, false, false);\r\n          removed.push(n); // batch keep track\r\n          this.removeWidget(n.el, true, false);\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets - starting with removing items in the new layout we will reposition\r\n    // to reduce collision and add no-coord ones at next available spot\r\n    let updateNodes: GridStackWidget[] = [];\r\n    this.engine.nodes = this.engine.nodes.filter(n => {\r\n      if (Utils.find(items, n.id)) { updateNodes.push(n); return false; } // remove if found from list\r\n      return true;\r\n    });\r\n    items.forEach(w => {\r\n      let item = Utils.find(updateNodes, w.id);\r\n      if (item) {\r\n        // if item sizes to content, re-use the exiting height so it's a better guess at the final size (same if width doesn't change)\r\n        if (Utils.shouldSizeToContent(item)) w.h = item.h;\r\n        // check if missing coord, in which case find next empty slot with new (or old if missing) sizes\r\n        this.engine.nodeBoundFix(w);\r\n        if (w.autoPosition || w.x === undefined || w.y === undefined) {\r\n          w.w = w.w || item.w;\r\n          w.h = w.h || item.h;\r\n          this.engine.findEmptyPosition(w);\r\n        }\r\n\r\n        // add back to current list BUT force a collision check if it 'appears' we didn't change to make sure we don't overlap others now\r\n        this.engine.nodes.push(item);\r\n        if (Utils.samePos(item, w)) {\r\n          this.moveNode(item, {...w, forceCollide: true});\r\n        }\r\n\r\n        this.update(item.el, w);\r\n        if (w.subGridOpts?.children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load(w.subGridOpts.children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addRemove) {\r\n        this.addWidget(w);\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.batchUpdate(false);\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    prevCB ? GridStack.addRemoveCB = prevCB : delete GridStack.addRemoveCB;\r\n    // delay adding animation back\r\n    if (noAnim && this.opts.animate) setTimeout(() => this.setAnimation(this.opts.animate));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)\r\n   * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.\r\n   */\r\n  public batchUpdate(flag = true): GridStack {\r\n    this.engine.batchUpdate(flag);\r\n    if (!flag) {\r\n      this._updateContainerHeight();\r\n      this._triggerRemoveEvent();\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // do rem/em to px conversion\r\n    if (this.opts.cellHeightUnit === 'rem') {\r\n      return (this.opts.cellHeight as number) * parseFloat(getComputedStyle(document.documentElement).fontSize);\r\n    }\r\n    if (this.opts.cellHeightUnit === 'em') {\r\n      return (this.opts.cellHeight as number) * parseFloat(getComputedStyle(this.el).fontSize);\r\n    }\r\n    // else get first cell height\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    if (el) {\r\n      let h = Utils.toNumber(el.getAttribute('gs-h')) || 1; // since we don't write 1 anymore\r\n      return Math.round(el.offsetHeight / h);\r\n    }\r\n    // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\r\n    let rows = parseInt(this.el.getAttribute('gs-current-row'));\r\n    return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight as number;\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    this.resizeToContentCheck();\r\n\r\n    if (update) {\r\n      this._updateStyles(true); // true = force re-create for current # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.getColumn();\r\n  }\r\n  /** return our expected width (or parent) , and optionally of window for dynamic column check */\r\n  protected _widthOrContainer(forBreakpoint = false): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return forBreakpoint && this.opts.columnOpts?.breakpointForWindow ? window.innerWidth : (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n  /** checks for dynamic column count for our current size, returning true if changed */\r\n  protected checkDynamicColumn(): boolean {\r\n    const resp = this.opts.columnOpts;\r\n    if (!resp || (!resp.columnWidth && !resp.breakpoints?.length)) return false;\r\n    const column = this.getColumn();\r\n    let newColumn = column;\r\n    const w = this._widthOrContainer(true);\r\n    if (resp.columnWidth) {\r\n      newColumn = Math.min(Math.round(w / resp.columnWidth) || 1, resp.columnMax);\r\n    } else {\r\n      // find the closest breakpoint (already sorted big to small) that matches\r\n      newColumn = resp.columnMax;\r\n      let i = 0;\r\n      while (i < resp.breakpoints.length && w <= resp.breakpoints[i].w) {\r\n        newColumn = resp.breakpoints[i++].c || column;\r\n      }\r\n    }\r\n    if (newColumn !== column) {\r\n      const bk = resp.breakpoints?.find(b => b.c === newColumn);\r\n      this.column(newColumn, bk?.layout || resp.layout);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * re-layout grid items to reclaim any empty space. Options are:\r\n   * 'list' keep the widget left->right order the same, even if that means leaving an empty slot if things don't fit\r\n   * 'compact' might re-order items to fill any empty space\r\n   *\r\n   * doSort - 'false' to let you do your own sorting ahead in case you need to control a different order. (default to sort)\r\n   */\r\n  public compact(layout: CompactOptions = 'compact', doSort = true): GridStack {\r\n    this.engine.compact(layout, doSort);\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default ('moveScale'). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (!column || column < 1 || this.opts.column === column) return this;\r\n\r\n    let oldColumn = this.getColumn();\r\n    this.opts.column = column;\r\n    if (!this.engine) return this; // called in constructor, noting else to do\r\n\r\n    this.engine.column = column;\r\n    this.el.classList.remove('gs-' + oldColumn);\r\n    this.el.classList.add('gs-' + column);\r\n\r\n    // update the items now, checking if we have a custom children layout\r\n    /*const newChildren = this.opts.columnOpts?.breakpoints?.find(r => r.c === column)?.children;\r\n    if (newChildren) this.load(newChildren);\r\n    else*/ this.engine.columnChanged(oldColumn, column, undefined, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    this.resizeToContentCheck(true); // wait for width resizing\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number { return this.opts.column as number; }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this.offAll();\r\n    this._updateResizeEvent(true);\r\n    this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n    this.setAnimation(false);\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this._styleSheetClass);\r\n      this.el.removeAttribute('gs-current-row');\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    if (this.parentGridItem) delete this.parentGridItem.subGrid;\r\n    delete this.parentGridItem;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    if (this.opts.float !== val) {\r\n      this.opts.float = this.engine.float = val;\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: {top: number, left: number};\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.getColumn());\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand (or have some framework creating DOM), you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   * @param options widget definition to use instead of reading attributes or using default sizing values\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"1\" gs-w=\"3\"></div>');\r\n   * grid.el.appendChild('<div id=\"2\"></div>');\r\n   * grid.makeWidget('1');\r\n   * grid.makeWidget('2', {w:2, content: 'hello'});\r\n   */\r\n  public makeWidget(els: GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true, options);\r\n    const node = el.gridstackNode;\r\n\r\n    this._updateContainerHeight();\r\n\r\n    // see if there is a sub-grid to create\r\n    if (node.subGridOpts) {\r\n      this.makeSubGrid(el, node.subGridOpts, undefined, false); // node.subGrid will be used as option in method, no need to pass\r\n    }\r\n\r\n    // if we're adding an item into 1 column make sure\r\n    // we don't override the larger 12 column layout that was already saved. #1985\r\n    if (this.opts.column === 1) {\r\n      this._ignoreLayoutsNodeChange = true;\r\n    }\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => (callback as GridStackEventHandler)(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => (callback as GridStackNodesHandler)(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize'\r\n      || name === 'resizestop' || name === 'dropped' || name === 'resizecontent') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /** remove all event handlers */\r\n  public offAll(): GridStack {\r\n    Object.keys(this._gsEventHandler).forEach(key => this.off(key));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement && el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      if (GridStack.addRemoveCB) {\r\n        GridStack.addRemoveCB(this.el, node, false, false);\r\n      }\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      this._removeDD(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      this._removeDD(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n  /** @internal */\r\n  private hasAnimationCSS(): boolean { return this.el.classList.contains('grid-stack-animate')  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   * @param updateClass true (default) if css class gets updated\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public setStatic(val: boolean, updateClass = true, recurse = true): GridStack {\r\n    if (!!this.opts.staticGrid === val) return this;\r\n    val ? this.opts.staticGrid = true : delete this.opts.staticGrid;\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n); // either delete or init Drag&drop\r\n      if (n.subGrid && recurse) n.subGrid.setStatic(val, updateClass, recurse);\r\n    });\r\n    if (updateClass) { this._setStaticClass(); }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      let n = el?.gridstackNode;\r\n      if (!n) return;\r\n      let w = Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n      this.engine.nodeBoundFix(w);\r\n      delete w.autoPosition;\r\n      delete w.id;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content !== undefined) {\r\n        const itemContent = el.querySelector('.grid-stack-item-content');\r\n        if (itemContent && itemContent.innerHTML !== w.content) {\r\n          itemContent.innerHTML = w.content;\r\n          // restore any sub-grid back\r\n          if (n.subGrid?.el) {\r\n            itemContent.appendChild(n.subGrid.el);\r\n            if (!n.subGrid.opts.styleInHead) n.subGrid._updateStyles(true); // force create\r\n          }\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n      Utils.sanitizeMinMax(n);\r\n\r\n      // finally move the widget and update attr\r\n      if (m) {\r\n        const widthChanged = (m.w !== undefined && m.w !== n.w);\r\n        this.moveNode(n, m);\r\n        this.resizeToContentCheck(widthChanged, n); // wait for animation if we changed width\r\n      }\r\n      if (m || changed) {\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  private moveNode(n: GridStackNode, m: GridStackMoveOpts) {\r\n    this.engine.cleanNodes()\r\n      .beginUpdate(n)\r\n      .moveNode(n, m);\r\n    this._updateContainerHeight();\r\n    this._triggerChangeEvent();\r\n    this.engine.endUpdate();\r\n  }\r\n\r\n  /**\r\n   * Updates widget height to match the content height to avoid v-scrollbar or dead space.\r\n   * Note: this assumes only 1 child under resizeToContentParent='.grid-stack-item-content' (sized to gridItem minus padding) that is at the entire content size wanted.\r\n   * @param el grid item element\r\n   * @param useNodeH set to true if GridStackNode.h should be used instead of actual container height when we don't need to wait for animation to finish to get actual DOM heights\r\n   */\r\n  public resizeToContent(el: GridItemHTMLElement) {\r\n    if (!el) return;\r\n    el.classList.remove('size-to-content-max');\r\n    if (!el.clientHeight) return; // 0 when hidden, skip\r\n    const n = el.gridstackNode;\r\n    if (!n) return;\r\n    const grid = n.grid;\r\n    if (!grid || el.parentElement !== grid.el) return; // skip if we are not inside a grid\r\n    const cell = grid.getCellHeight(true);\r\n    if (!cell) return;\r\n    let height = n.h ? n.h * cell : el.clientHeight; // getBoundingClientRect().height seem to flicker back and forth\r\n    let item: Element;\r\n    if (n.resizeToContentParent) item = el.querySelector(n.resizeToContentParent);\r\n    if (!item) item = el.querySelector(GridStack.resizeToContentParent);\r\n    if (!item) return;\r\n    const padding = el.clientHeight - item.clientHeight; // full - available height to our child (minus border, padding...)\r\n    const itemH = n.h ? n.h * cell - padding : item.clientHeight; // calculated to what cellHeight is or will become (rather than actual to prevent waiting for animation to finish)\r\n    let wantedH: number;\r\n    if (n.subGrid) {\r\n      // sub-grid - use their actual row count * their cell height\r\n      wantedH = n.subGrid.getRow() * n.subGrid.getCellHeight(true);\r\n    } else {\r\n      // NOTE: clientHeight & getBoundingClientRect() is undefined for text and other leaf nodes. use <div> container!\r\n      const child = item.firstElementChild;\r\n      if (!child) { console.log(`Error: resizeToContent() '${GridStack.resizeToContentParent}'.firstElementChild is null, make sure to have a div like container. Skipping sizing.`); return; }\r\n      wantedH = child.getBoundingClientRect().height || itemH;\r\n    }\r\n    if (itemH === wantedH) return;\r\n    height += wantedH - itemH;\r\n    let h = Math.ceil(height / cell);\r\n    // check for min/max and special sizing\r\n    const softMax = Number.isInteger(n.sizeToContent) ? n.sizeToContent as number : 0;\r\n    if (softMax && h > softMax) {\r\n      h = softMax;\r\n      el.classList.add('size-to-content-max');  // get v-scroll back\r\n    }\r\n    if (n.minH && h < n.minH) h = n.minH;\r\n    else if (n.maxH && h > n.maxH) h = n.maxH;\r\n    if (h !== n.h) {\r\n      grid._ignoreLayoutsNodeChange = true;\r\n      grid.moveNode(n, {h});\r\n      delete grid._ignoreLayoutsNodeChange;\r\n    }\r\n  }\r\n\r\n  /** call the user resize (so they can do extra work) else our build in version */\r\n  private resizeToContentCBCheck(el: GridItemHTMLElement) {\r\n    if (GridStack.resizeToContentCB) GridStack.resizeToContentCB(el);\r\n    else this.resizeToContent(el);\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this._initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes?.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes?.length) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerEvent(type: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(type, {bubbles: false, detail: data}) : new Event(type);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  protected _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      const styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      Utils.removeStylesheet(this._styleSheetClass, styleLocation);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  protected _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    if (maxH === undefined) maxH = this.getRow();\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      const styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(this._styleSheetClass, styleLocation, {\r\n        nonce: this.opts.nonce,\r\n      });\r\n      if (!this._styles) return this;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i}\"]`, `top: ${getHeight(i)}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i+1}\"]`, `height: ${getHeight(i+1)}`); // start at 2\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    const parent = this.parentGridItem;\r\n    let row = this.getRow() + this._extraDragRow; // this checks for minRow already\r\n    const cellHeight = this.opts.cellHeight as number;\r\n    const unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n\r\n    // check for css min height (non nested grid). TODO: support mismatch, say: min % while unit is px.\r\n    if (!parent) {\r\n      const cssMinHeight = Utils.parseHeight(getComputedStyle(this.el)['minHeight']);\r\n      if (cssMinHeight.h > 0 && cssMinHeight.unit === unit) {\r\n        const minRow = Math.floor(cssMinHeight.h / cellHeight);\r\n        if (row < minRow) {\r\n          row = minRow;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    this.el.style.removeProperty('min-height');\r\n    this.el.style.removeProperty('height');\r\n    if (row) {\r\n      // nested grids have 'insert:0' to fill the space of parent by default, but we may be taller so use min-height for possible scrollbars\r\n      this.el.style[parent ? 'minHeight' : 'height'] = row * cellHeight + unit;\r\n    }\r\n\r\n    // if we're a nested grid inside an sizeToContent item, tell it to resize itself too\r\n    if (parent && !parent.grid.engine.batchMode && Utils.shouldSizeToContent(parent)) {\r\n      parent.grid.resizeToContentCBCheck(parent.el);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    node = node || this._readAttr(el);\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n\r\n    // write the dom sizes and class\r\n    this._writeAttr(el, node);\r\n    el.classList.add(gridDefaults.itemClass, this.opts.itemClass);\r\n    const sizeToContent = Utils.shouldSizeToContent(node);\r\n    sizeToContent ? el.classList.add('size-to-content') : el.classList.remove('size-to-content');\r\n    if (sizeToContent) this.resizeToContentCheck(false, node);\r\n\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  protected _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    n.w > 1 ? el.setAttribute('gs-w', String(n.w)) : el.removeAttribute('gs-w');\r\n    n.h > 1 ? el.setAttribute('gs-h', String(n.h)) : el.removeAttribute('gs-h');\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  protected _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  protected _readAttr(el: HTMLElement, clearDefaultAttr = true): GridStackWidget {\r\n    let n: GridStackNode = {};\r\n    n.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    n.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    n.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    n.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    n.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    n.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    n.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    n.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    n.id = el.getAttribute('gs-id');\r\n\r\n    // read but never written out\r\n    n.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    n.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    n.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    n.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n\r\n    // v8.x optimization to reduce un-needed attr that don't render or are default CSS\r\n    if (clearDefaultAttr) {\r\n      if (n.w === 1) el.removeAttribute('gs-w');\r\n      if (n.h === 1) el.removeAttribute('gs-h');\r\n      if (n.maxW) el.removeAttribute('gs-max-w');\r\n      if (n.minW) el.removeAttribute('gs-min-w');\r\n      if (n.maxH) el.removeAttribute('gs-max-h');\r\n      if (n.minH) el.removeAttribute('gs-min-h');\r\n    }\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in n) {\r\n      if (!n.hasOwnProperty(key)) return;\r\n      if (!n[key] && n[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete n[key];\r\n      }\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, or get our count from parent, as well as check for cellHeight==='auto' (square)\r\n   * or `sizeToContent` gridItem options.\r\n   */\r\n  public onResize(): GridStack {\r\n    if (!this.el?.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    if (this.prevWidth === this.el.clientWidth) return; // no-op\r\n    this.prevWidth = this.el.clientWidth\r\n    // console.log('onResize ', this.el.clientWidth);\r\n\r\n    this.batchUpdate();\r\n\r\n    // see if we're nested and take our column count from our parent....\r\n    let columnChanged = false;\r\n    if (this._autoColumn && this.parentGridItem) {\r\n      if (this.opts.column !== this.parentGridItem.w) {\r\n        this.column(this.parentGridItem.w, 'none');\r\n        columnChanged = true;\r\n      }\r\n    } else {\r\n      // else check for dynamic column\r\n      columnChanged = this.checkDynamicColumn();\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // update any nested grids, or items size\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) n.subGrid.onResize()\r\n    });\r\n\r\n    if (!this._skipInitialResize) this.resizeToContentCheck(columnChanged); // wait for anim of column changed (DOM reflow before we can size correctly)\r\n    delete this._skipInitialResize;\r\n\r\n    this.batchUpdate(false);\r\n\r\n    return this;\r\n  }\r\n\r\n  /** resizes content for given node (or all) if shouldSizeToContent() is true */\r\n  private resizeToContentCheck(delay = false, n: GridStackNode = undefined) {\r\n    if (!this.engine) return; // we've been deleted in between!\r\n\r\n    // update any gridItem height with sizeToContent, but wait for DOM $animation_speed to settle if we changed column count\r\n    // TODO: is there a way to know what the final (post animation) size of the content will be so we can animate the column width and height together rather than sequentially ?\r\n    if (delay && this.hasAnimationCSS()) return setTimeout(() => this.resizeToContentCheck(false, n), 300 + 10);\r\n\r\n    if (n) {\r\n      if (Utils.shouldSizeToContent(n)) this.resizeToContentCBCheck(n.el);\r\n    } else if (this.engine.nodes.some(n => Utils.shouldSizeToContent(n))) {\r\n      const nodes = [...this.engine.nodes]; // in case order changes while resizing one\r\n      this.batchUpdate();\r\n      nodes.forEach(n => {\r\n        if (Utils.shouldSizeToContent(n)) this.resizeToContentCBCheck(n.el);\r\n      });\r\n      this.batchUpdate(false);\r\n    }\r\n    // call this regardless of shouldSizeToContent because widget might need to stretch to take available space after a resize\r\n    if (this._gsEventHandler['resizecontent']) this._gsEventHandler['resizecontent'](null, n ? [n] : this.engine.nodes);\r\n  }\r\n\r\n  /** add or remove the grid element size event handler */\r\n  protected _updateResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting dynamic column (i.e. doing work)\r\n    // or supporting new sizeToContent option.\r\n    const trackSize = !this.parentGridItem && (this._isAutoCellHeight || this.opts.sizeToContent || this.opts.columnOpts\r\n      || this.engine.nodes.find(n => n.sizeToContent));\r\n\r\n    if (!forceRemove && trackSize && !this.resizeObserver) {\r\n      this._sizeThrottle = Utils.throttle(() => this.onResize(), this.opts.cellHeightThrottle);\r\n      this.resizeObserver = new ResizeObserver(() => this._sizeThrottle());\r\n      this.resizeObserver.observe(this.el);\r\n      this._skipInitialResize = true; // makeWidget will originally have called on startup\r\n    } else if ((forceRemove || !trackSize) && this.resizeObserver) {\r\n      this.resizeObserver.disconnect();\r\n      delete this.resizeObserver;\r\n      delete this._sizeThrottle;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  protected _initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  static GDRev = '10.0.1';\r\n\r\n  /* ===========================================================================================\r\n   * drag&drop methods that used to be stubbed out and implemented in dd-gridstack.ts\r\n   * but caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\r\n   * ===========================================================================================\r\n   */\r\n\r\n  /** get the global (but static to this code) DD implementation */\r\n  public static getDD(): DDGridStack {\r\n    return dd;\r\n  }\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\r\n   * is dynamically create and needs to be set later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item') or list of dom elements\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}\r\n   * @param root optional root which defaults to document (for shadow dom pas the parent HTMLDocument)\r\n   */\r\n  public static setupDragIn(dragIn?: string | HTMLElement[], dragInOptions?: DDDragInOpt, root: HTMLElement | Document = document): void {\r\n    if (dragInOptions?.pause !== undefined) {\r\n      DDManager.pauseDrag = dragInOptions.pause;\r\n    }\r\n\r\n    dragInOptions = {...dragInDefaultOptions, ...(dragInOptions || {})};\r\n    let els: HTMLElement[] = (typeof dragIn === 'string') ? Utils.getElements(dragIn, root) : dragIn;\r\n    if (els.length) els?.forEach(el => {\r\n      if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable, assuming the parent grid isn't noMove or static.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't move a static grid!\r\n    GridStack.getElements(els).forEach(el => {\r\n      const n = el.gridstackNode;\r\n      if (!n) return;\r\n      val ? delete n.noMove : n.noMove = true;\r\n      this._prepareDragDropByNode(n); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable, assuming the parent grid isn't noResize or static.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n    GridStack.getElements(els).forEach(el => {\r\n      let n = el.gridstackNode;\r\n      if (!n) return;\r\n      val ? delete n.noResize : n.noResize = true;\r\n      this._prepareDragDropByNode(n); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public disable(recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return;\r\n    this.enableMove(false, recurse);\r\n    this.enableResize(false, recurse);\r\n    this._triggerEvent('disable');\r\n    return this;\r\n  }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enable(recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return;\r\n    this.enableMove(true, recurse);\r\n    this.enableResize(true, recurse);\r\n    this._triggerEvent('enable');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids, and locally defined items still overrule\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enableMove(doEnable: boolean, recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't move a static grid!\r\n    doEnable ? delete this.opts.disableDrag : this.opts.disableDrag = true; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n);\r\n      if (n.subGrid && recurse) n.subGrid.enableMove(doEnable, recurse);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enableResize(doEnable: boolean, recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't size a static grid!\r\n    doEnable ? delete this.opts.disableResize : this.opts.disableResize = true; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n);\r\n      if (n.subGrid && recurse) n.subGrid.enableResize(doEnable, recurse);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** @internal removes any drag&drop present (called during destroy) */\r\n  protected _removeDD(el: DDElementHost): GridStack {\r\n    dd.draggable(el, 'destroy').resizable(el, 'destroy');\r\n    if (el.gridstackNode) {\r\n      delete el.gridstackNode._initDD; // reset our DD init flag\r\n    }\r\n    delete el.ddElement;\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to add drag over to support widgets being added externally */\r\n  protected _setupAcceptWidget(): GridStack {\r\n\r\n    // check if we need to disable things\r\n    if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\r\n      dd.droppable(this.el, 'destroy');\r\n      return this;\r\n    }\r\n\r\n    // vars shared across all methods\r\n    let cellHeight: number, cellWidth: number;\r\n\r\n    let onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      if (!node) return;\r\n\r\n      helper = helper || el;\r\n      let parent = this.el.getBoundingClientRect();\r\n      let {top, left} = helper.getBoundingClientRect();\r\n      left -= parent.left;\r\n      top -= parent.top;\r\n      let ui: DDUIData = {position: {top, left}};\r\n\r\n      if (node._temporaryRemoved) {\r\n        node.x = Math.max(0, Math.round(left / cellWidth));\r\n        node.y = Math.max(0, Math.round(top / cellHeight));\r\n        delete node.autoPosition;\r\n        this.engine.nodeBoundFix(node);\r\n\r\n        // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n        if (!this.engine.willItFit(node)) {\r\n          node.autoPosition = true; // ignore x,y and try for any slot...\r\n          if (!this.engine.willItFit(node)) {\r\n            dd.off(el, 'drag'); // stop calling us\r\n            return; // full grid or can't grow\r\n          }\r\n          if (node._willFitPos) {\r\n            // use the auto position instead #1687\r\n            Utils.copyPos(node, node._willFitPos);\r\n            delete node._willFitPos;\r\n          }\r\n        }\r\n\r\n        // re-use the existing node dragging method\r\n        this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n      } else {\r\n        // re-use the existing node dragging that does so much of the collision detection\r\n        this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n    }\r\n\r\n    dd.droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => {\r\n        let node: GridStackNode = el.gridstackNode;\r\n        // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n        if (node?.grid === this) return true;\r\n        if (!this.opts.acceptWidgets) return false;\r\n        // check for accept method or class matching\r\n        let canAccept = true;\r\n        if (typeof this.opts.acceptWidgets === 'function') {\r\n          canAccept = this.opts.acceptWidgets(el);\r\n        } else {\r\n          let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n          canAccept = el.matches(selector);\r\n        }\r\n        // finally check to make sure we actually have space left #1571\r\n        if (canAccept && node && this.opts.maxRow) {\r\n          let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters and autoPosition\r\n          canAccept = this.engine.willItFit(n);\r\n        }\r\n        return canAccept;\r\n      }\r\n    })\r\n    /**\r\n     * entering our grid area\r\n     */\r\n      .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      // console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = el.gridstackNode;\r\n        // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n        if (node?.grid === this && !node._temporaryRemoved) {\r\n        // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n          return false; // prevent parent from receiving msg (which may be a grid as well)\r\n        }\r\n\r\n        // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n        if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\r\n        // console.log('dropover without leave'); // TEST\r\n          let otherGrid = node.grid;\r\n          otherGrid._leave(el, helper);\r\n        }\r\n\r\n        // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true);\r\n\r\n        // load any element attributes if we don't have a node\r\n        if (!node) {\r\n          node = this._readAttr(el, false); // don't wipe external (e.g. drag toolbar) attr #2354\r\n        }\r\n        if (!node.grid) {\r\n          node._isExternal = true;\r\n          el.gridstackNode = node;\r\n        }\r\n\r\n        // calculate the grid size based on element outer size\r\n        helper = helper || el;\r\n        let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n        let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n        // if the item came from another grid, make a copy and save the original info in case we go back there\r\n        if (node.grid && node.grid !== this) {\r\n        // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n        // console.log('dropover cloning node'); // TEST\r\n          if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n          el.gridstackNode = node = {...node, w, h, grid: this};\r\n          delete node.x;\r\n          delete node.y;\r\n          this.engine.cleanupNode(node)\r\n            .nodeBoundFix(node);\r\n          // restore some internal fields we need after clearing them all\r\n          node._initDD =\r\n          node._isExternal =  // DOM needs to be re-parented on a drop\r\n          node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n        } else {\r\n          node.w = w; node.h = h;\r\n          node._temporaryRemoved = true; // so we can insert it\r\n        }\r\n\r\n        // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n        this._itemRemoving(node.el, false);\r\n\r\n        dd.on(el, 'drag', onDrag);\r\n        // make sure this is called at least once when going fast #1578\r\n        onDrag(event as DragEvent, el, helper);\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      })\r\n    /**\r\n     * Leaving our grid area...\r\n     */\r\n      .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      // console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = el.gridstackNode;\r\n        if (!node) return false;\r\n        // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n        // so skip this one if we're not the active grid really..\r\n        if (!node.grid || node.grid === this) {\r\n          this._leave(el, helper);\r\n          // if we were created as temporary nested grid, go back to before state\r\n          if (this._isTemp) {\r\n            this.removeAsSubGrid(node);\r\n          }\r\n        }\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      })\r\n    /**\r\n     * end - releasing the mouse\r\n     */\r\n      .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n        let node = el.gridstackNode;\r\n        // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n        if (node?.grid === this && !node._isExternal) return false;\r\n\r\n        const wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n        this.placeholder.remove();\r\n\r\n        // disable animation when replacing a placeholder (already positioned) with actual content\r\n        const noAnim = wasAdded && this.opts.animate;\r\n        if (noAnim) this.setAnimation(false);\r\n\r\n        // notify previous grid of removal\r\n        // console.log('drop delete _gridstackNodeOrig') // TEST\r\n        let origNode = el._gridstackNodeOrig;\r\n        delete el._gridstackNodeOrig;\r\n        if (wasAdded && origNode?.grid && origNode.grid !== this) {\r\n          let oGrid = origNode.grid;\r\n          oGrid.engine.removeNodeFromLayoutCache(origNode);\r\n          oGrid.engine.removedNodes.push(origNode);\r\n          oGrid._triggerRemoveEvent()._triggerChangeEvent();\r\n          // if it's an empty sub-grid that got auto-created, nuke it\r\n          if (oGrid.parentGridItem && !oGrid.engine.nodes.length && oGrid.opts.subGridDynamic) {\r\n            oGrid.removeAsSubGrid();\r\n          }\r\n        }\r\n\r\n        if (!node) return false;\r\n\r\n        // use existing placeholder node as it's already in our list with drop location\r\n        if (wasAdded) {\r\n          this.engine.cleanupNode(node); // removes all internal _xyz values\r\n          node.grid = this;\r\n        }\r\n        delete node.grid._isTemp;\r\n        dd.off(el, 'drag');\r\n        // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n        // as the helper will be nuked by jquery-ui otherwise. TODO: update old code path\r\n        if (helper !== el) {\r\n          helper.remove();\r\n          el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n          if (wasAdded) {\r\n            el = el.cloneNode(true) as GridItemHTMLElement;\r\n          }\r\n        } else {\r\n          el.remove(); // reduce flicker as we change depth here, and size further down\r\n          this._removeDD(el);\r\n        }\r\n        if (!wasAdded) return false;\r\n        el.gridstackNode = node;\r\n        node.el = el;\r\n        let subGrid = node.subGrid?.el?.gridstack; // set when actual sub-grid present\r\n        // @ts-ignore\r\n        Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n        Utils.removePositioningStyles(el);// @ts-ignore\r\n        this.el.appendChild(el);// @ts-ignore // TODO: now would be ideal time to _removeHelperStyle() overriding floating styles (native only)\r\n        this._prepareElement(el, true, node);\r\n        if (subGrid) {\r\n          subGrid.parentGridItem = node;\r\n          if (!subGrid.opts.styleInHead) subGrid._updateStyles(true); // re-create sub-grid styles now that we've moved\r\n        }\r\n        this._updateContainerHeight();\r\n        this.engine.addedNodes.push(node);// @ts-ignore\r\n        this._triggerAddEvent();// @ts-ignore\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n        if (this._gsEventHandler['dropped']) {\r\n          this._gsEventHandler['dropped']({...event, type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n        }\r\n\r\n        // delay adding animation back\r\n        if (noAnim) setTimeout(() => this.setAnimation(this.opts.animate));\r\n\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      });\r\n    return this;\r\n  }\r\n\r\n  /** @internal mark item for removal */\r\n  private _itemRemoving(el: GridItemHTMLElement, remove: boolean) {\r\n    let node = el ? el.gridstackNode : undefined;\r\n    if (!node || !node.grid || el.classList.contains(this.opts.removableOptions.decline)) return;\r\n    remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n    remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n  }\r\n\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  protected _setupRemoveDrop(): GridStack {\r\n    if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n      let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n      if (!trashEl) return this;\r\n      // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n      // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n      // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n      if (!dd.isDroppable(trashEl)) {\r\n        dd.droppable(trashEl, this.opts.removableOptions)\r\n          .on(trashEl, 'dropover', (event, el) => this._itemRemoving(el, true))\r\n          .on(trashEl, 'dropout',  (event, el) => this._itemRemoving(el, false));\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal prepares the element for drag&drop */\r\n  protected _prepareDragDropByNode(node: GridStackNode): GridStack {\r\n    let el = node.el;\r\n    const noMove = node.noMove || this.opts.disableDrag;\r\n    const noResize = node.noResize || this.opts.disableResize;\r\n\r\n    // check for disabled grid first\r\n    if (this.opts.staticGrid || (noMove && noResize)) {\r\n      if (node._initDD) {\r\n        this._removeDD(el); // nukes everything instead of just disable, will add some styles back next\r\n        delete node._initDD;\r\n      }\r\n      el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n      return this;\r\n    }\r\n\r\n    if (!node._initDD) {\r\n      // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n      let cellWidth: number;\r\n      let cellHeight: number;\r\n\r\n      /** called when item starts moving/resizing */\r\n      let onStartMoving = (event: Event, ui: DDUIData) => {\r\n        // trigger any 'dragstart' / 'resizestart' manually\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, event.target);\r\n        }\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n        this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n\r\n      /** called when item is being dragged/resized */\r\n      let dragOrResize = (event: MouseEvent, ui: DDUIData) => {\r\n        this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n\r\n      /** called when the item stops moving/resizing */\r\n      let onEndMoving = (event: Event) => {\r\n        this.placeholder.remove();\r\n        delete node._moving;\r\n        delete node._event;\r\n        delete node._lastTried;\r\n        const widthChanged = node.w !== node._orig.w;\r\n\r\n        // if the item has moved to another grid, we're done here\r\n        let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n        if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n        node.el = target;\r\n\r\n        if (node._isAboutToRemove) {\r\n          let grid = el.gridstackNode.grid;\r\n          if (grid._gsEventHandler[event.type]) {\r\n            grid._gsEventHandler[event.type](event, target);\r\n          }\r\n          grid.engine.nodes.push(node); // temp add it back so we can proper remove it next\r\n          grid.removeWidget(el, true, true);\r\n        } else {\r\n          Utils.removePositioningStyles(target);\r\n          if (node._temporaryRemoved) {\r\n            // got removed - restore item back to before dragging position\r\n            Utils.copyPos(node, node._orig);// @ts-ignore\r\n            this._writePosAttr(target, node);\r\n            this.engine.addNode(node);\r\n          } else {\r\n            // move to new placeholder location\r\n            this._writePosAttr(target, node);\r\n          }\r\n          if (this._gsEventHandler[event.type]) {\r\n            this._gsEventHandler[event.type](event, target);\r\n          }\r\n        }\r\n        // @ts-ignore\r\n        this._extraDragRow = 0;// @ts-ignore\r\n        this._updateContainerHeight();// @ts-ignore\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n\r\n        if (event.type === 'resizestop') {\r\n          if (Number.isInteger(node.sizeToContent)) node.sizeToContent = node.h; // new soft limit\r\n          this.resizeToContentCheck(widthChanged, node); // wait for width animation if changed\r\n        }\r\n      }\r\n\r\n      dd.draggable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        drag: dragOrResize\r\n      }).resizable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        resize: dragOrResize\r\n      });\r\n      node._initDD = true; // we've set DD support now\r\n    }\r\n\r\n    // finally fine tune move vs resize by disabling any part...\r\n    dd.draggable(el, noMove ? 'disable' : 'enable')\r\n      .resizable(el, noResize ? 'disable' : 'enable');\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal handles actual drag/resize start */\r\n  protected _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void {\r\n    this.engine.cleanNodes()\r\n      .beginUpdate(node);\r\n    // @ts-ignore\r\n    this._writePosAttr(this.placeholder, node)\r\n    this.el.appendChild(this.placeholder);\r\n    // console.log('_onStartMoving placeholder') // TEST\r\n\r\n    node.el = this.placeholder;\r\n    node._lastUiPosition = ui.position;\r\n    node._prevYPix = ui.position.top;\r\n    node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n    delete node._lastTried;\r\n\r\n    if (event.type === 'dropover' && node._temporaryRemoved) {\r\n      // console.log('engine.addNode x=' + node.x); // TEST\r\n      this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n      node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n    }\r\n\r\n    // set the min/max resize info\r\n    this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop as number, this.opts.marginRight as number, this.opts.marginBottom as number, this.opts.marginLeft as number);\r\n    if (event.type === 'resizestart') {\r\n      dd.resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n        .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n      if (node.maxW) { dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n      if (node.maxH) { dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n    }\r\n  }\r\n\r\n  /** @internal handles actual drag/resize */\r\n  protected _dragOrResize(el: GridItemHTMLElement, event: MouseEvent, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void {\r\n    let p = {...node._orig}; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n    let resizing: boolean;\r\n    let mLeft = this.opts.marginLeft as number,\r\n      mRight = this.opts.marginRight as number,\r\n      mTop = this.opts.marginTop as number,\r\n      mBottom = this.opts.marginBottom as number;\r\n\r\n    // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\r\n    let mHeight = Math.round(cellHeight * 0.1),\r\n      mWidth = Math.round(cellWidth * 0.1);\r\n    mLeft = Math.min(mLeft, mWidth);\r\n    mRight = Math.min(mRight, mWidth);\r\n    mTop = Math.min(mTop, mHeight);\r\n    mBottom = Math.min(mBottom, mHeight);\r\n\r\n    if (event.type === 'drag') {\r\n      if (node._temporaryRemoved) return; // handled by dropover\r\n      let distance = ui.position.top - node._prevYPix;\r\n      node._prevYPix = ui.position.top;\r\n      if (this.opts.draggable.scroll !== false) {\r\n        Utils.updateScrollPosition(el, ui.position, distance);\r\n      }\r\n\r\n      // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n      let left = ui.position.left + (ui.position.left > node._lastUiPosition.left  ? -mRight : mLeft);\r\n      let top = ui.position.top + (ui.position.top > node._lastUiPosition.top  ? -mBottom : mTop);\r\n      p.x = Math.round(left / cellWidth);\r\n      p.y = Math.round(top / cellHeight);\r\n\r\n      // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n      let prev = this._extraDragRow;\r\n      if (this.engine.collide(node, p)) {\r\n        let row = this.getRow();\r\n        let extra = Math.max(0, (p.y + node.h) - row);\r\n        if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n          extra = Math.max(0, this.opts.maxRow - row);\r\n        }// @ts-ignore\r\n        this._extraDragRow = extra;// @ts-ignore\r\n      } else this._extraDragRow = 0;// @ts-ignore\r\n      if (this._extraDragRow !== prev) this._updateContainerHeight();\r\n\r\n      if (node.x === p.x && node.y === p.y) return; // skip same\r\n      // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n      // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n    } else if (event.type === 'resize')  {\r\n      if (p.x < 0) return;\r\n      // Scrolling page if needed\r\n      Utils.updateScrollResize(event, el, cellHeight);\r\n\r\n      // get new size\r\n      p.w = Math.round((ui.size.width - mLeft) / cellWidth);\r\n      p.h = Math.round((ui.size.height - mTop) / cellHeight);\r\n      if (node.w === p.w && node.h === p.h) return;\r\n      if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\r\n\r\n      // if we size on left/top side this might move us, so get possible new position as well\r\n      let left = ui.position.left + mLeft;\r\n      let top = ui.position.top + mTop;\r\n      p.x = Math.round(left / cellWidth);\r\n      p.y = Math.round(top / cellHeight);\r\n\r\n      resizing = true;\r\n    }\r\n\r\n    node._event = event;\r\n    node._lastTried = p; // set as last tried (will nuke if we go there)\r\n    let rect: GridStackPosition = { // screen pix of the dragged box\r\n      x: ui.position.left + mLeft,\r\n      y: ui.position.top + mTop,\r\n      w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\r\n      h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\r\n    };\r\n    if (this.engine.moveNodeCheck(node, {...p, cellWidth, cellHeight, rect, resizing})) {\r\n      node._lastUiPosition = ui.position;\r\n      this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\r\n      delete node._skipDown;\r\n      if (resizing && node.subGrid) node.subGrid.onResize();\r\n      this._extraDragRow = 0;// @ts-ignore\r\n      this._updateContainerHeight();\r\n\r\n      let target = event.target as GridItemHTMLElement;// @ts-ignore\r\n      this._writePosAttr(target, node);\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, target);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @internal called when item leaving our area by either cursor dropout event\r\n   * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n   * our item to start with else restore prev node values from prev grid it came from.\r\n   */\r\n  protected _leave(el: GridItemHTMLElement, helper?: GridItemHTMLElement): void {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n\r\n    dd.off(el, 'drag'); // no need to track while being outside\r\n\r\n    // this gets called when cursor leaves and shape is outside, so only do this once\r\n    if (node._temporaryRemoved) return;\r\n    node._temporaryRemoved = true;\r\n\r\n    this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n    node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n\r\n    if (this.opts.removable === true) { // boolean vs a class string\r\n      // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n      this._itemRemoving(el, true);\r\n    }\r\n\r\n    // finally if item originally came from another grid, but left us, restore things back to prev info\r\n    if (el._gridstackNodeOrig) {\r\n      // console.log('leave delete _gridstackNodeOrig') // TEST\r\n      el.gridstackNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n    } else if (node._isExternal) {\r\n      // item came from outside (like a toolbar) so nuke any node info\r\n      delete node.el;\r\n      delete el.gridstackNode;\r\n      // and restore all nodes back to original\r\n      this.engine.restoreInitial();\r\n    }\r\n  }\r\n\r\n  // legacy method removed\r\n  public commit(): GridStack { obsolete(this, this.batchUpdate(false), 'commit', 'batchUpdate', '5.2'); return this; }\r\n}\r\n","/**\r\n * types.ts 10.0.1\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStack } from './gridstack';\r\nimport { GridStackEngine } from './gridstack-engine';\r\n\r\n// default values for grid options - used during init and when saving out\r\nexport const gridDefaults: GridStackOptions = {\r\n  alwaysShowResizeHandle: 'mobile',\r\n  animate: true,\r\n  auto: true,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  cellHeightUnit: 'px',\r\n  column: 12,\r\n  draggable: { handle: '.grid-stack-item-content', appendTo: 'body', scroll: true },\r\n  handle: '.grid-stack-item-content',\r\n  itemClass: 'grid-stack-item',\r\n  margin: 10,\r\n  marginUnit: 'px',\r\n  maxRow: 0,\r\n  minRow: 0,\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  removableOptions: { accept: 'grid-stack-item', decline: 'grid-stack-non-removable'},\r\n  resizable: { handles: 'se' },\r\n  rtl: 'auto',\r\n\r\n  // **** same as not being set ****\r\n  // disableDrag: false,\r\n  // disableResize: false,\r\n  // float: false,\r\n  // handleClass: null,\r\n  // removable: false,\r\n  // staticGrid: false,\r\n  // styleInHead: false,\r\n  //removable\r\n};\r\n\r\n/** default dragIn options */\r\nexport const dragInDefaultOptions: DDDragInOpt = {\r\n  handle: '.grid-stack-item-content',\r\n  appendTo: 'body',\r\n  // revert: 'invalid',\r\n  // scroll: false,\r\n};\r\n\r\n/**\r\n * different layout options when changing # of columns, including a custom function that takes new/old column count, and array of new/old positions\r\n * Note: new list may be partially already filled if we have a cache of the layout at that size and new items were added later.\r\n * Options are:\r\n * 'list' - treat items as sorted list, keeping items (un-sized unless too big for column count) sequentially reflowing them\r\n * 'compact' - similar to list, but using compact() method which will possibly re-order items if an empty slots are available due to a larger item needing to be pushed to next row\r\n * 'moveScale' - will scale and move items by the ratio new newColumnCount / oldColumnCount\r\n * 'move' | 'scale' - will only size or move items\r\n * 'none' will leave items unchanged, unless they don't fit in column count\r\n */\r\nexport type ColumnOptions = 'list' | 'compact' | 'moveScale' | 'move' | 'scale' | 'none' |\r\n  ((column: number, oldColumn: number, nodes: GridStackNode[], oldNodes: GridStackNode[]) => void);\r\nexport type CompactOptions = 'list' | 'compact';\r\nexport type numberOrString = number | string;\r\nexport interface GridItemHTMLElement extends HTMLElement {\r\n  /** pointer to grid node instance */\r\n  gridstackNode?: GridStackNode;\r\n  /** @internal */\r\n  _gridstackNodeOrig?: GridStackNode;\r\n}\r\n\r\nexport type GridStackElement = string | HTMLElement | GridItemHTMLElement;\r\n\r\n/** specific and general event handlers for the .on() method */\r\nexport type GridStackEventHandler = (event: Event) => void;\r\nexport type GridStackElementHandler = (event: Event, el: GridItemHTMLElement) => void;\r\nexport type GridStackNodesHandler = (event: Event, nodes: GridStackNode[]) => void;\r\nexport type GridStackDroppedHandler = (event: Event, previousNode: GridStackNode, newNode: GridStackNode) => void;\r\nexport type GridStackEventHandlerCallback = GridStackEventHandler | GridStackElementHandler | GridStackNodesHandler | GridStackDroppedHandler;\r\n\r\n/** optional function called during load() to callback the user on new added/remove grid items | grids */\r\nexport type AddRemoveFcn = (parent: HTMLElement, w: GridStackWidget, add: boolean, grid: boolean) => HTMLElement | undefined;\r\n\r\n/** optional function called during save() to let the caller add additional custom data to the GridStackWidget structure that will get returned */\r\nexport type SaveFcn = (node: GridStackNode, w: GridStackWidget) => void;\r\n\r\nexport type ResizeToContentFcn = (el: GridItemHTMLElement) => void;\r\n\r\n/** describes the responsive nature of the grid */\r\nexport interface Responsive {\r\n  /** wanted width to maintain (+-50%) to dynamically pick a column count */\r\n  columnWidth?: number;\r\n  /** maximum number of columns allowed (default: 12). Note: make sure to have correct extra CSS to support this.*/\r\n  columnMax?: number;\r\n  /** global re-layout mode when changing columns */\r\n  layout?: ColumnOptions;\r\n  /** specify if breakpoints are for window size or grid size (default:false = grid) */\r\n  breakpointForWindow?: boolean;\r\n  /** explicit width:column breakpoints instead of automatic 'columnWidth'. Note: make sure to have correct extra CSS to support this.*/\r\n  breakpoints?: Breakpoint[];\r\n}\r\n\r\nexport interface Breakpoint {\r\n  /** <= width for the breakpoint to trigger */\r\n  w?: number;\r\n  /** column count */\r\n  c: number;\r\n  /** re-layout mode if different from global one */\r\n  layout?: ColumnOptions;\r\n  /** TODO: children layout, which spells out exact locations and could omit/add some children */\r\n  // children?: GridStackWidget[];\r\n}\r\n\r\n/**\r\n * Defines the options for a Grid\r\n */\r\nexport interface GridStackOptions {\r\n  /**\r\n   * accept widgets dragged from other grids or from outside (default: `false`). Can be:\r\n   * `true` (uses `'.grid-stack-item'` class filter) or `false`,\r\n   * string for explicit class name,\r\n   * function returning a boolean. See [example](http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  acceptWidgets?: boolean | string | ((element: Element) => boolean);\r\n\r\n  /** possible values (default: `mobile`) - does not apply to non-resizable widgets\r\n    * `false` the resizing handles are only shown while hovering over a widget\r\n    * `true` the resizing handles are always shown\r\n    * 'mobile' if running on a mobile device, default to `true` (since there is no hovering per say), else `false`.\r\n    See [example](http://gridstack.github.io/gridstack.js/demo/mobile.html) */\r\n  alwaysShowResizeHandle?: true | false | 'mobile';\r\n\r\n  /** turns animation on (default?: true) */\r\n  animate?: boolean;\r\n\r\n  /** if false gridstack will not initialize existing items (default?: true) */\r\n  auto?: boolean;\r\n\r\n  /**\r\n   * one cell height (default?: 'auto'). Can be:\r\n   *  an integer (px)\r\n   *  a string (ex: '100px', '10em', '10rem'). Note: % doesn't work right - see demo/cell-height.html\r\n   *  0, in which case the library will not generate styles for rows. Everything must be defined in your own CSS files.\r\n   *  'auto' - height will be calculated for square cells (width / column) and updated live as you resize the window - also see `cellHeightThrottle`\r\n   *  'initial' - similar to 'auto' (start at square cells) but stay that size during window resizing.\r\n   */\r\n  cellHeight?: numberOrString;\r\n\r\n  /** throttle time delay (in ms) used when cellHeight='auto' to improve performance vs usability (default?: 100).\r\n   * A value of 0 will make it instant at a cost of re-creating the CSS file at ever window resize event!\r\n   * */\r\n  cellHeightThrottle?: number;\r\n\r\n  /** (internal) unit for cellHeight (default? 'px') which is set when a string cellHeight with a unit is passed (ex: '10rem') */\r\n  cellHeightUnit?: string;\r\n\r\n  /** list of children item to create when calling load() or addGrid() */\r\n  children?: GridStackWidget[];\r\n\r\n  /** number of columns (default?: 12). Note: IF you change this, CSS also have to change. See https://github.com/gridstack/gridstack.js#change-grid-columns.\r\n   * Note: for nested grids, it is recommended to use 'auto' which will always match the container grid-item current width (in column) to keep inside and outside\r\n   * items always to same. flag is not supported for regular non-nested grids.\r\n   */\r\n  column?: number | 'auto';\r\n\r\n  /** responsive column layout for width:column behavior */\r\n  columnOpts?: Responsive;\r\n\r\n  /** additional class on top of '.grid-stack' (which is required for our CSS) to differentiate this instance.\r\n  Note: only used by addGrid(), else your element should have the needed class */\r\n  class?: string;\r\n\r\n  /** disallows dragging of widgets (default?: false) */\r\n  disableDrag?: boolean;\r\n\r\n  /** disallows resizing of widgets (default?: false). */\r\n  disableResize?: boolean;\r\n\r\n  /** allows to override UI draggable options. (default?: { handle?: '.grid-stack-item-content', appendTo?: 'body' }) */\r\n  draggable?: DDDragOpt;\r\n\r\n  /** let user drag nested grid items out of a parent or not (default true - not supported yet) */\r\n  //dragOut?: boolean;\r\n\r\n  /** the type of engine to create (so you can subclass) default to GridStackEngine */\r\n  engineClass?: typeof GridStackEngine;\r\n\r\n  /** enable floating widgets (default?: false) See example (http://gridstack.github.io/gridstack.js/demo/float.html) */\r\n  float?: boolean;\r\n\r\n  /** draggable handle selector (default?: '.grid-stack-item-content') */\r\n  handle?: string;\r\n\r\n  /** draggable handle class (e.g. 'grid-stack-item-content'). If set 'handle' is ignored (default?: null) */\r\n  handleClass?: string;\r\n\r\n  /** additional widget class (default?: 'grid-stack-item') */\r\n  itemClass?: string;\r\n\r\n  /**\r\n   * gap between grid item and content (default?: 10). This will set all 4 sides and support the CSS formats below\r\n   *  an integer (px)\r\n   *  a string with possible units (ex: '2em', '20px', '2rem')\r\n   *  string with space separated values (ex: '5px 10px 0 20px' for all 4 sides, or '5em 10em' for top/bottom and left/right pairs like CSS).\r\n   * Note: all sides must have same units (last one wins, default px)\r\n   */\r\n  margin?: numberOrString;\r\n\r\n  /** OLD way to optionally set each side - use margin: '5px 10px 0 20px' instead. Used internally to store each side. */\r\n  marginTop?: numberOrString;\r\n  marginRight?: numberOrString;\r\n  marginBottom?: numberOrString;\r\n  marginLeft?: numberOrString;\r\n\r\n  /** (internal) unit for margin (default? 'px') set when `margin` is set as string with unit (ex: 2rem') */\r\n  marginUnit?: string;\r\n\r\n  /** maximum rows amount. Default? is 0 which means no maximum rows */\r\n  maxRow?: number;\r\n\r\n  /** minimum rows amount. Default is `0`. You can also do this with `min-height` CSS attribute\r\n   * on the grid div in pixels, which will round to the closest row.\r\n   */\r\n  minRow?: number;\r\n\r\n  /** If you are using a nonce-based Content Security Policy, pass your nonce here and\r\n   * GridStack will add it to the <style> elements it creates. */\r\n  nonce?: string;\r\n\r\n  /** class for placeholder (default?: 'grid-stack-placeholder') */\r\n  placeholderClass?: string;\r\n\r\n  /** placeholder default content (default?: '') */\r\n  placeholderText?: string;\r\n\r\n  /** allows to override UI resizable options. (default?: { handles: 'se' }) */\r\n  resizable?: DDResizeOpt;\r\n\r\n  /**\r\n   * if true widgets could be removed by dragging outside of the grid. It could also be a selector string (ex: \".trash\"),\r\n   * in this case widgets will be removed by dropping them there (default?: false)\r\n   * See example (http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  removable?: boolean | string;\r\n\r\n  /** allows to override UI removable options. (default?: { accept: '.grid-stack-item' }) */\r\n  removableOptions?: DDRemoveOpt;\r\n\r\n  /** fix grid number of rows. This is a shortcut of writing `minRow:N, maxRow:N`. (default `0` no constrain) */\r\n  row?: number;\r\n\r\n  /**\r\n   * if true turns grid to RTL. Possible values are true, false, 'auto' (default?: 'auto')\r\n   * See [example](http://gridstack.github.io/gridstack.js/demo/rtl.html)\r\n   */\r\n  rtl?: boolean | 'auto';\r\n\r\n  /** set to true if all grid items (by default, but item can also override) height should be based on content size instead of WidgetItem.h to avoid v-scrollbars.\r\n   Note: this is still row based, not pixels, so it will use ceil(getBoundingClientRect().height / getCellHeight()) */\r\n   sizeToContent?: boolean;\r\n\r\n  /**\r\n   * makes grid static (default?: false). If `true` widgets are not movable/resizable.\r\n   * You don't even need draggable/resizable. A CSS class\r\n   * 'grid-stack-static' is also added to the element.\r\n   */\r\n  staticGrid?: boolean;\r\n\r\n  /** if `true` will add style element to `<head>` otherwise will add it to element's parent node (default `false`). */\r\n  styleInHead?: boolean;\r\n\r\n  /** list of differences in options for automatically created sub-grids under us (inside our grid-items) */\r\n  subGridOpts?: GridStackOptions;\r\n\r\n  /** enable/disable the creation of sub-grids on the fly by dragging items completely\r\n   * over others (nest) vs partially (push). Forces `DDDragOpt.pause=true` to accomplish that. */\r\n  subGridDynamic?: boolean;\r\n}\r\n\r\n/** options used during GridStackEngine.moveNode() */\r\nexport interface GridStackMoveOpts extends GridStackPosition {\r\n  /** node to skip collision */\r\n  skip?: GridStackNode;\r\n  /** do we pack (default true) */\r\n  pack?: boolean;\r\n  /** true if we are calling this recursively to prevent simple swap or coverage collision - default false*/\r\n  nested?: boolean;\r\n  /** vars to calculate other cells coordinates */\r\n  cellWidth?: number;\r\n  cellHeight?: number;\r\n  marginTop?: number;\r\n  marginBottom?: number;\r\n  marginLeft?: number;\r\n  marginRight?: number;\r\n  /** position in pixels of the currently dragged items (for overlap check) */\r\n  rect?: GridStackPosition;\r\n  /** true if we're live resizing */\r\n  resizing?: boolean;\r\n  /** best node (most coverage) we collied with */\r\n  collide?: GridStackNode;\r\n  /** for collision check even if we don't move */\r\n  forceCollide?: boolean;\r\n}\r\n\r\nexport interface GridStackPosition {\r\n  /** widget position x (default?: 0) */\r\n  x?: number;\r\n  /** widget position y (default?: 0) */\r\n  y?: number;\r\n  /** widget dimension width (default?: 1) */\r\n  w?: number;\r\n  /** widget dimension height (default?: 1) */\r\n  h?: number;\r\n}\r\n\r\n/**\r\n * GridStack Widget creation options\r\n */\r\nexport interface GridStackWidget extends GridStackPosition {\r\n  /** if true then x, y parameters will be ignored and widget will be places on the first available position (default?: false) */\r\n  autoPosition?: boolean;\r\n  /** minimum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minW?: number;\r\n  /** maximum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxW?: number;\r\n  /** minimum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minH?: number;\r\n  /** maximum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxH?: number;\r\n  /** prevent direct resizing by the user (default?: undefined = un-constrained) */\r\n  noResize?: boolean;\r\n  /** prevents direct moving by the user (default?: undefined = un-constrained) */\r\n  noMove?: boolean;\r\n  /** same as noMove+noResize but also prevents being pushed by other widgets or api (default?: undefined = un-constrained) */\r\n  locked?: boolean;\r\n  /** value for `gs-id` stored on the widget (default?: undefined) */\r\n  id?: string;\r\n  /** html to append inside as content */\r\n  content?: string;\r\n  /** local (vs grid) override - see GridStackOptions.\r\n   * Note: This also allow you to set a maximum h value (but user changeable during normal resizing) to prevent unlimited content from taking too much space (get scrollbar) */\r\n  sizeToContent?: boolean | number;\r\n  /** local override of GridStack.resizeToContentParent that specify the class to use for the parent (actual) vs child (wanted) height */\r\n  resizeToContentParent?: string;\r\n  /** optional nested grid options and list of children, which then turns into actual instance at runtime to get options from */\r\n  subGridOpts?: GridStackOptions;\r\n}\r\n\r\n/** Drag&Drop resize options */\r\nexport interface DDResizeOpt {\r\n  /** do resize handle hide by default until mouse over ? - default: true on desktop, false on mobile*/\r\n  autoHide?: boolean;\r\n  /**\r\n   * sides where you can resize from (ex: 'e, se, s, sw, w') - default 'se' (south-east)\r\n   * Note: it is not recommended to resize from the top sides as weird side effect may occur.\r\n  */\r\n  handles?: string;\r\n}\r\n\r\n/** Drag&Drop remove options */\r\nexport interface DDRemoveOpt {\r\n  /** class that can be removed (default?: opts.itemClass) */\r\n  accept?: string;\r\n  /** class that cannot be removed (default: 'grid-stack-non-removable') */\r\n  decline?: string;\r\n}\r\n\r\n/** Drag&Drop dragging options */\r\nexport interface DDDragOpt {\r\n  /** class selector of items that can be dragged. default to '.grid-stack-item-content' */\r\n  handle?: string;\r\n  /** default to 'body' */\r\n  appendTo?: string;\r\n  /** if set (true | msec), dragging placement (collision) will only happen after a pause by the user. Note: this is Global */\r\n  pause?: boolean | number;\r\n  /** default to `true` */\r\n  scroll?: boolean;\r\n  /** prevents dragging from starting on specified elements, listed as comma separated selectors (eg: '.no-drag'). default built in is 'input,textarea,button,select,option' */\r\n  cancel?: string;\r\n}\r\nexport interface DDDragInOpt extends DDDragOpt {\r\n  /** helper function when dropping: 'clone' or your own method */\r\n  helper?: 'clone' | ((event: Event) => HTMLElement);\r\n  /** used when dragging item from the outside, and canceling (ex: 'invalid' or your own method)*/\r\n  // revert?: string | ((event: Event) => HTMLElement);\r\n}\r\n\r\nexport interface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\nexport interface Position {\r\n  top: number;\r\n  left: number;\r\n}\r\nexport interface Rect extends Size, Position {}\r\n\r\n/** data that is passed during drag and resizing callbacks */\r\nexport interface DDUIData {\r\n  position?: Position;\r\n  size?: Size;\r\n  draggable?: HTMLElement;\r\n  /* fields not used by GridStack but sent by jq ? leave in case we go back to them...\r\n  originalPosition? : Position;\r\n  offset?: Position;\r\n  originalSize?: Size;\r\n  element?: HTMLElement[];\r\n  helper?: HTMLElement[];\r\n  originalElement?: HTMLElement[];\r\n  */\r\n}\r\n\r\n/**\r\n * internal runtime descriptions describing the widgets in the grid\r\n */\r\nexport interface GridStackNode extends GridStackWidget {\r\n  /** pointer back to HTML element */\r\n  el?: GridItemHTMLElement;\r\n  /** pointer back to parent Grid instance */\r\n  grid?: GridStack;\r\n  /** actual sub-grid instance */\r\n  subGrid?: GridStack;\r\n  /** @internal internal id used to match when cloning engines or saving column layouts */\r\n  _id?: number;\r\n  /** @internal does the node attr ned to be updated due to changed x,y,w,h values */\r\n  _dirty?: boolean;\r\n  /** @internal */\r\n  _updating?: boolean;\r\n  /** @internal true when over trash/another grid so we don't bother removing drag CSS style that would animate back to old position */\r\n  _isAboutToRemove?: boolean;\r\n  /** @internal true if item came from outside of the grid -> actual item need to be moved over */\r\n  _isExternal?: boolean;\r\n  /** @internal Mouse event that's causing moving|resizing */\r\n  _event?: MouseEvent;\r\n  /** @internal moving vs resizing */\r\n  _moving?: boolean;\r\n  /** @internal true if we jumped down past item below (one time jump so we don't have to totally pass it) */\r\n  _skipDown?: boolean;\r\n  /** @internal original values before a drag/size */\r\n  _orig?: GridStackPosition;\r\n  /** @internal position in pixels used during collision check  */\r\n  _rect?: GridStackPosition;\r\n  /** @internal top/left pixel location before a drag so we can detect direction of move from last position*/\r\n  _lastUiPosition?: Position;\r\n  /** @internal set on the item being dragged/resized remember the last positions we've tried (but failed) so we don't try again during drag/resize */\r\n  _lastTried?: GridStackPosition;\r\n  /** @internal position willItFit() will use to position the item */\r\n  _willFitPos?: GridStackPosition;\r\n  /** @internal last drag Y pixel position used to incrementally update V scroll bar */\r\n  _prevYPix?: number;\r\n  /** @internal true if we've remove the item from ourself (dragging out) but might revert it back (release on nothing -> goes back) */\r\n  _temporaryRemoved?: boolean;\r\n  /** @internal true if we should remove DOM element on _notify() rather than clearing _id (old way) */\r\n  _removeDOM?: boolean;\r\n  /** @internal had drag&drop been initialized */\r\n  _initDD?: boolean;\r\n}\r\n","/**\r\n * utils.ts 10.0.1\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **removed** in a future release');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements. optional root which defaults to document (for shadow dom) */\r\n  static getElements(els: GridStackElement, root: HTMLElement | Document = document): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      const doc = ('getElementById' in root) ? root as Document : undefined;\r\n\r\n      // Note: very common for people use to id='1,2,3' which is only legal as HTML5 id, but not CSS selectors\r\n      // so if we start with a number, assume it's an id and just return that one item...\r\n      // see https://github.com/gridstack/gridstack.js/issues/2234#issuecomment-1523796562\r\n      if (doc && !isNaN(+els[0])) { // start with digit\r\n        const el = doc.getElementById(els);\r\n        return el ? [el] : [];\r\n      }\r\n\r\n      let list = root.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = root.querySelectorAll('.' + els);\r\n        if (!list.length) { list = root.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element. optional root which defaults to document (for shadow dom) */\r\n  static getElement(els: GridStackElement, root: HTMLElement | Document = document): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      const doc = ('getElementById' in root) ? root as Document : undefined;\r\n      if (!els.length) return null;\r\n      if (doc && els[0] === '#') {\r\n        return doc.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '#' || els[0] === '.' || els[0] === '[') {\r\n        return root.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if (doc && !isNaN(+els[0])) { // start with digit\r\n        return doc.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id, then class\r\n      let el = root.querySelector(els);\r\n      if (doc && !el) { el = doc.getElementById(els) }\r\n      if (!el) { el = root.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** true if we should resize to content */\r\n  static shouldSizeToContent(n: GridStackNode | undefined): boolean {\r\n    return n?.grid && (!!n.sizeToContent || (n.grid.opts.sizeToContent && n.sizeToContent !== false));\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n\r\n  /** returns the area a and b overlap */\r\n  static areaIntercept(a: GridStackPosition, b: GridStackPosition): number {\r\n    let x0 = (a.x > b.x) ? a.x : b.x;\r\n    let x1 = (a.x+a.w < b.x+b.w) ? a.x+a.w : b.x+b.w;\r\n    if (x1 <= x0) return 0; // no overlap\r\n    let y0 = (a.y > b.y) ? a.y : b.y;\r\n    let y1 = (a.y+a.h < b.y+b.h) ? a.y+a.h : b.y+b.h;\r\n    if (y1 <= y0) return 0; // no overlap\r\n    return (x1-x0) * (y1-y0);\r\n  }\r\n\r\n  /** returns the area */\r\n  static area(a: GridStackPosition): number {\r\n    return a.w * a.h;\r\n  }\r\n\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir: 1 | -1 = 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => ((b.x ?? 1000) + (b.y ?? 1000) * column)-((a.x ?? 1000) + (a.y ?? 1000) * column));\r\n    else\r\n      return nodes.sort((b, a) => ((b.x ?? 1000) + (b.y ?? 1000) * column)-((a.x ?? 1000) + (a.y ?? 1000) * column));\r\n  }\r\n\r\n  /** find an item by id */\r\n  static find(nodes: GridStackNode[], id: string): GridStackNode | undefined {\r\n    return id ? nodes.find(n => n.id === id) : undefined;\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement, options?: { nonce?: string }): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    const nonce = options?.nonce\r\n    if (nonce) style.nonce = nonce\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string, parent?: HTMLElement): void {\r\n    const target = parent || document;\r\n    let el = target.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      if (val === 'auto' || val === '') h = 0;\r\n      else {\r\n        let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n        if (!match) {\r\n          throw new Error(`Invalid height val = ${val}`);\r\n        }\r\n        unit = match[2] || 'px';\r\n        h = parseFloat(match[1]);\r\n      }\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** copies over b size & position (GridStackPosition), and optionally min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, doMinMax = false): GridStackWidget {\r\n    if (b.x !== undefined) a.x = b.x;\r\n    if (b.y !== undefined) a.y = b.y;\r\n    if (b.w !== undefined) a.w = b.w;\r\n    if (b.h !== undefined) a.h = b.h;\r\n    if (doMinMax) {\r\n      if (b.minW) a.minW = b.minW;\r\n      if (b.minH) a.minH = b.minH;\r\n      if (b.maxW) a.maxW = b.maxW;\r\n      if (b.maxH) a.maxH = b.maxH;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /** true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && (a.w || 1) === (b.w || 1) && (a.h || 1) === (b.h || 1);\r\n  }\r\n\r\n  /** given a node, makes sure it's min/max are valid */\r\n  static sanitizeMinMax(node: GridStackNode) {\r\n    // remove 0, undefine, null\r\n    if (!node.minW) { delete node.minW; }\r\n    if (!node.minH) { delete node.minH; }\r\n    if (!node.maxW) { delete node.maxW; }\r\n    if (!node.maxH) { delete node.maxH; }\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (key[0] === '_' || val === b[key]) {\r\n        delete a[key]\r\n      } else if (val && typeof val === 'object' && b[key] !== undefined) {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** removes internal fields '_' and default values for saving */\r\n  static removeInternalForSave(n: GridStackNode, removeEl = true): void {\r\n    for (let key in n) { if (key[0] === '_' || n[key] === null || n[key] === undefined ) delete n[key]; }\r\n    delete n.grid;\r\n    if (removeEl) delete n.el;\r\n    // delete default values (will be re-created on read)\r\n    if (!n.autoPosition) delete n.autoPosition;\r\n    if (!n.noResize) delete n.noResize;\r\n    if (!n.noMove) delete n.noMove;\r\n    if (!n.locked) delete n.locked;\r\n    if (n.w === 1 || n.w === n.minW) delete n.w;\r\n    if (n.h === 1 || n.h === n.minH) delete n.h;\r\n  }\r\n\r\n  /** return the closest parent (or itself) matching the given class */\r\n  // static closestUpByClass(el: HTMLElement, name: string): HTMLElement {\r\n  //   while (el) {\r\n  //     if (el.classList.contains(name)) return el;\r\n  //     el = el.parentElement\r\n  //   }\r\n  //   return null;\r\n  // }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n  static getScrollElement(el?: HTMLElement): HTMLElement {\r\n    if (!el) return document.scrollingElement as HTMLElement || document.documentElement; // IE support\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollElement(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollElement(el);\r\n    const height = scrollEl.clientHeight;\r\n    // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n    // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n    // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n    // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n    const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n    const pointerPosY = event.clientY - offsetTop;\r\n    const top = pointerPosY < distance;\r\n    const bottom = pointerPosY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY)});\r\n    }\r\n  }\r\n\r\n  /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n  static clone<T>(obj: T): T {\r\n    if (obj === null || obj === undefined || typeof(obj) !== 'object') {\r\n      return obj;\r\n    }\r\n    // return Object.assign({}, obj);\r\n    if (obj instanceof Array) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return [...obj] as any;\r\n    }\r\n    return {...obj};\r\n  }\r\n\r\n  /**\r\n   * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n   * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n   */\r\n  static cloneDeep<T>(obj: T): T {\r\n    // list of fields we will skip during cloneDeep (nested objects, other internal)\r\n    const skipFields = ['parentGrid', 'el', 'grid', 'subGrid', 'engine'];\r\n    // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n    const ret = Utils.clone(obj);\r\n    for (const key in ret) {\r\n      // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n      if (ret.hasOwnProperty(key) && typeof(ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n        ret[key] = Utils.cloneDeep(obj[key]);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /** deep clone the given HTML node, removing teh unique id field */\r\n  public static cloneNode(el: HTMLElement): HTMLElement {\r\n    const node = el.cloneNode(true) as HTMLElement;\r\n    node.removeAttribute('id');\r\n    return node;\r\n  }\r\n\r\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement): void {\r\n    let parentNode: HTMLElement;\r\n    if (typeof parent === 'string') {\r\n      parentNode = Utils.getElement(parent);\r\n    } else {\r\n      parentNode = parent;\r\n    }\r\n    if (parentNode) {\r\n      parentNode.appendChild(el);\r\n    }\r\n  }\r\n\r\n  // public static setPositionRelative(el: HTMLElement): void {\r\n  //   if (!(/^(?:r|a|f)/).test(getComputedStyle(el).position)) {\r\n  //     el.style.position = \"relative\";\r\n  //   }\r\n  // }\r\n\r\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\r\n    if (styles instanceof Object) {\r\n      for (const s in styles) {\r\n        if (styles.hasOwnProperty(s)) {\r\n          if (Array.isArray(styles[s])) {\r\n            // support fallback value\r\n            (styles[s] as string[]).forEach(val => {\r\n              el.style[s] = val;\r\n            });\r\n          } else {\r\n            el.style[s] = styles[s];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\r\n    const evt = { type: info.type };\r\n    const obj = {\r\n      button: 0,\r\n      which: 0,\r\n      buttons: 1,\r\n      bubbles: true,\r\n      cancelable: true,\r\n      target: info.target ? info.target : e.target\r\n    };\r\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\r\n    if ((e as DragEvent).dataTransfer) {\r\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\r\n    }\r\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\r\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\r\n    return {...evt, ...obj} as unknown as T;\r\n  }\r\n\r\n  /** copies the MouseEvent properties and sends it as another event to the given target */\r\n  public static simulateMouseEvent(e: MouseEvent, simulatedType: string, target?: EventTarget): void {\r\n    const simulatedEvent = document.createEvent('MouseEvents');\r\n    simulatedEvent.initMouseEvent(\r\n      simulatedType, // type\r\n      true,         // bubbles\r\n      true,         // cancelable\r\n      window,       // view\r\n      1,            // detail\r\n      e.screenX,    // screenX\r\n      e.screenY,    // screenY\r\n      e.clientX,    // clientX\r\n      e.clientY,    // clientY\r\n      e.ctrlKey,    // ctrlKey\r\n      e.altKey,     // altKey\r\n      e.shiftKey,   // shiftKey\r\n      e.metaKey,    // metaKey\r\n      0,            // button\r\n      e.target      // relatedTarget\r\n    );\r\n    (target || e.target).dispatchEvent(simulatedEvent);\r\n  }\r\n\r\n  /** returns true if event is inside the given element rectangle */\r\n  // Note: Safari Mac has null event.relatedTarget which causes #1684 so check if DragEvent is inside the coordinates instead\r\n  //    this.el.contains(event.relatedTarget as HTMLElement)\r\n  // public static inside(e: MouseEvent, el: HTMLElement): boolean {\r\n  //   // srcElement, toElement, target: all set to placeholder when leaving simple grid, so we can't use that (Chrome)\r\n  //   let target: HTMLElement = e.relatedTarget || (e as any).fromElement;\r\n  //   if (!target) {\r\n  //     const { bottom, left, right, top } = el.getBoundingClientRect();\r\n  //     return (e.x < right && e.x > left && e.y < bottom && e.y > top);\r\n  //   }\r\n  //   return el.contains(target);\r\n  // }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(324);\n"],"names":["root","factory","exports","module","define","amd","self","_eventRegister","this","_disabled","on","event","callback","off","enable","disable","destroy","triggerEvent","eventName","disabled","DDBaseImplement","el","option","dragScale","x","y","handleName","handle","substring","dragEl","classList","contains","querySelector","_mouseDown","bind","_mouseMove","_mouseUp","addEventListener","isTouch","touchstart","pointerdown","remove","forDestroy","removeEventListener","add","dragTimeout","window","clearTimeout","mouseDownEvent","helper","updateOption","opts","Object","keys","forEach","key","e","DDManager","mouseHandled","button","target","closest","cancel","dragging","dragElement","dropElement","document","touchmove","touchend","preventDefault","activeElement","blur","_callDrag","ev","Utils","initEvent","type","drag","ui","s","_dragFollow","pauseDrag","pause","Number","isInteger","setTimeout","Math","abs","grid","gridstackNode","ddElement","ddDroppable","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","_setupHelperStyle","start","parentElement","style","position","parentOriginStylePosition","_removeHelperStyle","stop","drop","cloneNode","body","appendTo","dragElementOriginStyle","DDDraggable","originStyleProp","map","prop","pointerEvents","width","height","willChange","transition","node","_isAboutToRemove","offset","left","clientX","offsetLeft","top","clientY","offsetTop","getComputedStyle","match","parent","xformOffsetX","xformOffsetY","testEl","createElement","addElStyles","opacity","zIndex","appendChild","testElPosition","getBoundingClientRect","removeChild","targetOffset","containmentRect","_mouseEnter","_mouseLeave","_setupAccept","pointerenter","pointerleave","_canDrop","stopPropagation","over","_ui","out","parentDrop","accept","matches","draggable","DDDroppable","init","DDElement","ddDraggable","indexOf","ddResizable","setupDraggable","cleanDraggable","setupResizable","DDResizable","cleanResizable","setupDroppable","cleanDroppable","resizable","value","_getDDElements","dEl","handles","getAttribute","autoHide","alwaysShowResizeHandle","resize","dragIn","droppable","_accept","isDroppable","isDraggable","isResizable","name","els","create","hosts","getElements","length","list","filter","d","DDGridStack","host","direction","moving","dir","_init","DDResizableHandle","prefix","userSelect","_triggerEvent","rectScale","newRect","originalRect","scrolled","rect","temporalRect","size","_mouseOver","_mouseOut","_setupAutoHide","_setupHandlers","_removeHandlers","updateHandles","updateAutoHide","auto","overResizeElement","handlerDirection","handlers","split","trim","_resizeStart","_resizeStop","move","_resizing","scrollEl","getScrollElement","scrollY","scrollTop","startEvent","_setupHelper","_applyChange","_getChange","_cleanHelper","elOriginStyleVal","_originStyleProp","i","oEvent","offsetX","offsetY","constrain","_constrainSize","round","oWidth","oHeight","maxWidth","MAX_SAFE_INTEGER","minWidth","maxHeight","minHeight","min","max","scaleReciprocal","DocumentTouch","navigator","maxTouchPoints","msMaxTouchPoints","simulateMouseEvent","simulatedType","touches","cancelable","touch","changedTouches","simulatedEvent","createEvent","initMouseEvent","screenX","screenY","dispatchEvent","simulatePointerMouseEvent","DDTouch","touchHandled","pointerLeaveTimeout","wasDragging","pointerType","releasePointerCapture","pointerId","addedNodes","removedNodes","column","maxRow","_float","float","nodes","onChange","batchUpdate","flag","doPack","batchMode","_prevFloat","cleanNodes","saveInitial","_packNodes","_notify","_useEntireRowArea","nn","_hasLocked","_moving","_skipDown","_fixCollisions","collide","opt","sortNodes","nested","swap","area","w","h","skip","didMove","newOpt","pack","moved","locked","moveNode","copyPos","undefined","skip2","skipId","_id","skip2Id","find","n","isIntercepted","collideAll","directionCollideCoverage","o","collides","_rect","r0","r","overMax","r2","yOver","MAX_VALUE","xOver","cacheRects","right","bottom","a","b","_doSwap","_dirty","touching","isTouching","t","isAreaEmpty","compact","layout","doSort","wasBatch","wasColumnResize","_inColumnResize","copyNodes","index","after","autoPosition","addNode","val","sort","_updating","_orig","newY","prepareNode","resizing","GridStackEngine","_idSeq","defaults","noResize","noMove","sanitizeMinMax","isNaN","nodeBoundFix","before","maxW","maxH","minW","minH","findCacheLayout","copy","cacheOneLayout","samePos","getDirtyNodes","verify","dirtyNodes","concat","_lastTried","some","restoreInitial","findEmptyPosition","nodeList","found","floor","box","triggerAddEvent","skipCollision","_temporaryRemoved","_removeDOM","push","removeNode","removeDOM","removeAll","_layouts","moveNodeCheck","clonedNode","changedPosConstrain","clone","canMove","getRow","c","willItFit","_willFitPos","cleanupNode","content","p","wasUndefinedPack","forceCollide","prevPos","needToMove","activeDrag","subGridDynamic","_isTemp","areaIntercept","a1","a2","makeSubGrid","reduce","row","beginUpdate","endUpdate","save","saveElement","saveCB","len","wl","l","removeInternalForSave","layoutsNodesChange","columnChanged","prevColumn","doCompact","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","clear","existing","id","n2","removeNodeFromLayoutCache","dd","_gsEventHandler","_extraDragRow","gridstack","minRow","rowAttr","toNumber","_alwaysShowResizeHandle","bk","columnOpts","breakpoints","oldOpts","oneColumnModeDomSort","console","log","oneColumnSize","disableOneColumnMode","oneSize","oneColumn","resp","columnWidth","columnMax","cloneDeep","gridDefaults","staticGrid","toBool","handleClass","removableOptions","itemClass","decline","animate","_initMargin","checkDynamicColumn","rtl","grandParent","parentGridItem","subGrid","_isAutoCellHeight","cellHeight","cellHeightUnit","_styleSheetClass","_setStaticClass","engineClass","GridStack","engine","getColumn","cbNodes","_writePosAttr","_updateStyles","getGridItems","_prepareElement","children","load","setAnimation","_setupRemoveDrop","_setupAcceptWidget","_updateResizeEvent","options","elOrString","getGridElement","error","initAll","selector","grids","getGridElements","addGrid","addRemoveCB","doc","implementation","createHTMLDocument","innerHTML","class","registerEngine","_placeholder","placeholderChild","className","placeholderText","placeholderClass","placeholder","addWidget","arguments","domAttr","_readAttr","_writeAttr","_insertNotAppend","prepend","makeWidget","ops","nodeToAdd","saveContent","subGridTemplate","autoColumn","subGridOpts","newItem","newItemOpt","_removeDD","_prepareDragDropByNode","update","_autoColumn","_event","removeAsSubGrid","nodeThatRemoved","pGrid","removeWidget","saveGridOpt","sub","listOrOpt","marginBottom","marginTop","marginRight","marginLeft","margin","origShow","removeInternalAndSame","items","addRemove","haveCoord","_ignoreLayoutsNodeChange","prevCB","removed","noAnim","updateNodes","item","shouldSizeToContent","_updateContainerHeight","_triggerRemoveEvent","_triggerAddEvent","_triggerChangeEvent","getCellHeight","forcePixel","parseFloat","documentElement","fontSize","offsetHeight","rows","parseInt","marginDiff","cellWidth","data","parseHeight","unit","resizeToContentCheck","_widthOrContainer","forBreakpoint","breakpointForWindow","innerWidth","clientWidth","newColumn","oldColumn","Array","from","offAll","setStatic","parentNode","removeAttribute","_removeStylesheet","getFloat","getCellFromPixel","useDocRelative","containerPos","relativeLeft","relativeTop","rowHeight","getElement","noData","detail","doAnimate","hasAnimationCSS","updateClass","recurse","warn","m","k","itemContent","styleInHead","changed","ddChanged","widthChanged","resizeToContent","clientHeight","cell","resizeToContentParent","wantedH","padding","itemH","child","firstElementChild","ceil","softMax","sizeToContent","resizeToContentCBCheck","resizeToContentCB","marginUnit","getMargin","elements","CustomEvent","bubbles","Event","_styles","styleLocation","removeStylesheet","forceUpdate","createStylesheet","nonce","_max","addCSSRule","getHeight","cssMinHeight","setAttribute","String","removeProperty","attrs","clearDefaultAttr","hasOwnProperty","classes","onResize","prevWidth","_skipInitialResize","delay","forceRemove","trackSize","resizeObserver","disconnect","_sizeThrottle","throttle","cellHeightThrottle","ResizeObserver","observe","margins","getDD","setupDragIn","dragInOptions","dragInDefaultOptions","movable","enableMove","enableResize","doEnable","disableDrag","disableResize","_initDD","acceptWidgets","removable","onDrag","_onStartMoving","_dragOrResize","canAccept","_leave","_isExternal","offsetWidth","_gridstackNodeOrig","_itemRemoving","wasAdded","origNode","oGrid","removePositioningStyles","trashEl","onStartMoving","dragOrResize","onEndMoving","_lastUiPosition","_prevYPix","mLeft","mRight","mTop","mBottom","mHeight","mWidth","distance","scroll","updateScrollPosition","prev","extra","updateScrollResize","commit","obsolete","Engine","GDRev","f","oldName","newName","rev","wrapper","apply","args","prototype","info","oldAttr","getElementById","querySelectorAll","x0","x1","y0","y1","col","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","rules","addRule","insertRule","v","toLowerCase","Boolean","Error","sources","source","same","doMinMax","removeEl","func","isWaiting","scrollingElement","test","overflow","overflowY","innerHeightOrClientHeight","innerHeight","offsetDiffDown","offsetDiffUp","prevScroll","pointerPosY","scrollBy","behavior","obj","skipFields","ret","styles","isArray","evt","which","buttons","dataTransfer","ctrlKey","altKey","shiftKey","metaKey","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}